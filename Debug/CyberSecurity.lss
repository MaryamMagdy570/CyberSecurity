
CyberSecurity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  00002a3c  00002ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  008001ae  008001ae  00002c1e  2**0
                  ALLOC
  3 .stab         000023e8  00000000  00000000  00002c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f3  00000000  00000000  00005008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000060fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f1  00000000  00000000  0000629b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228e  00000000  00000000  0000648c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  0000871a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d4  00000000  00000000  000099e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000aab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  0000ac78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  0000af41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b82b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 87 11 	jmp	0x230e	; 0x230e <__vector_10>
      2c:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3d       	cpi	r26, 0xDB	; 219
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 12 	call	0x247e	; 0x247e <main>
      8a:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e9       	ldi	r26, 0x9F	; 159
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e9       	ldi	r24, 0x9F	; 159
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__epilogue_restores__+0x20>

0000085a <__floatunsisf>:
     85a:	a8 e0       	ldi	r26, 0x08	; 8
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x10>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
     86a:	61 15       	cp	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	81 05       	cpc	r24, r1
     870:	91 05       	cpc	r25, r1
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	60 c0       	rjmp	.+192    	; 0x93a <__stack+0xdb>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	c8 2e       	mov	r12, r24
     882:	d1 2c       	mov	r13, r1
     884:	dc 82       	std	Y+4, r13	; 0x04
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	ed 82       	std	Y+5, r14	; 0x05
     88a:	fe 82       	std	Y+6, r15	; 0x06
     88c:	0f 83       	std	Y+7, r16	; 0x07
     88e:	18 87       	std	Y+8, r17	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 a6 04 	call	0x94c	; 0x94c <__clzsi2>
     898:	fc 01       	movw	r30, r24
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f7 ff       	sbrs	r31, 7
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0xb7>
     8a0:	22 27       	eor	r18, r18
     8a2:	33 27       	eor	r19, r19
     8a4:	2e 1b       	sub	r18, r30
     8a6:	3f 0b       	sbc	r19, r31
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	02 2e       	mov	r0, r18
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	d6 94       	lsr	r13
     8b2:	c7 94       	ror	r12
     8b4:	b7 94       	ror	r11
     8b6:	a7 94       	ror	r10
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	2a 95       	dec	r18
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__stack+0x6f>
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	8e 21       	and	r24, r14
     8e2:	9f 21       	and	r25, r15
     8e4:	a0 23       	and	r26, r16
     8e6:	b1 23       	and	r27, r17
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	4a 29       	or	r20, r10
     8fa:	5b 29       	or	r21, r11
     8fc:	6c 29       	or	r22, r12
     8fe:	7d 29       	or	r23, r13
     900:	4d 83       	std	Y+5, r20	; 0x05
     902:	5e 83       	std	Y+6, r21	; 0x06
     904:	6f 83       	std	Y+7, r22	; 0x07
     906:	78 87       	std	Y+8, r23	; 0x08
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	12 c0       	rjmp	.+36     	; 0x93a <__stack+0xdb>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	81 f0       	breq	.+32     	; 0x93a <__stack+0xdb>
     91a:	0e 2e       	mov	r0, r30
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
     91e:	ee 0c       	add	r14, r14
     920:	ff 1c       	adc	r15, r15
     922:	00 1f       	adc	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	0a 94       	dec	r0
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0xbf>
     92a:	ed 82       	std	Y+5, r14	; 0x05
     92c:	fe 82       	std	Y+6, r15	; 0x06
     92e:	0f 83       	std	Y+7, r16	; 0x07
     930:	18 87       	std	Y+8, r17	; 0x08
     932:	ce 1a       	sub	r12, r30
     934:	df 0a       	sbc	r13, r31
     936:	dc 82       	std	Y+4, r13	; 0x04
     938:	cb 82       	std	Y+3, r12	; 0x03
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     944:	28 96       	adiw	r28, 0x08	; 8
     946:	ea e0       	ldi	r30, 0x0A	; 10
     948:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x10>

0000094c <__clzsi2>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	7b 01       	movw	r14, r22
     956:	8c 01       	movw	r16, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e8 16       	cp	r14, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	f8 06       	cpc	r15, r24
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 07       	cpc	r16, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	18 07       	cpc	r17, r24
     968:	88 f4       	brcc	.+34     	; 0x98c <__clzsi2+0x40>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e8 16       	cp	r14, r24
     96e:	f1 04       	cpc	r15, r1
     970:	01 05       	cpc	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	31 f0       	breq	.+12     	; 0x982 <__clzsi2+0x36>
     976:	28 f0       	brcs	.+10     	; 0x982 <__clzsi2+0x36>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <__clzsi2+0x64>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	e8 16       	cp	r14, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f8 06       	cpc	r15, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 07       	cpc	r16, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	18 07       	cpc	r17, r24
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <__clzsi2+0x5c>
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__clzsi2+0x64>
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	20 e2       	ldi	r18, 0x20	; 32
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	4a 0b       	sbc	r20, r26
     9be:	5b 0b       	sbc	r21, r27
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__clzsi2+0x7e>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__clzsi2+0x76>
     9ce:	f7 01       	movw	r30, r14
     9d0:	e9 55       	subi	r30, 0x59	; 89
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	28 1b       	sub	r18, r24
     9d8:	31 09       	sbc	r19, r1
     9da:	41 09       	sbc	r20, r1
     9dc:	51 09       	sbc	r21, r1
     9de:	c9 01       	movw	r24, r18
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "DIO_interface.h"


void CLCD_voidInit(void)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	2e 97       	sbiw	r28, 0x0e	; 14
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e2       	ldi	r26, 0x20	; 32
     d50:	b2 e4       	ldi	r27, 0x42	; 66
     d52:	8b 87       	std	Y+11, r24	; 0x0b
     d54:	9c 87       	std	Y+12, r25	; 0x0c
     d56:	ad 87       	std	Y+13, r26	; 0x0d
     d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d60:	9e 85       	ldd	r25, Y+14	; 0x0e
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	4a ef       	ldi	r20, 0xFA	; 250
     d68:	54 e4       	ldi	r21, 0x44	; 68
     d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	8f 83       	std	Y+7, r24	; 0x07
     d74:	98 87       	std	Y+8, r25	; 0x08
     d76:	a9 87       	std	Y+9, r26	; 0x09
     d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e8       	ldi	r20, 0x80	; 128
     d88:	5f e3       	ldi	r21, 0x3F	; 63
     d8a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     d8e:	88 23       	and	r24, r24
     d90:	2c f4       	brge	.+10     	; 0xd9c <CLCD_voidInit+0x66>
		__ticks = 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9e 83       	std	Y+6, r25	; 0x06
     d98:	8d 83       	std	Y+5, r24	; 0x05
     d9a:	3f c0       	rjmp	.+126    	; 0xe1a <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d9c:	6f 81       	ldd	r22, Y+7	; 0x07
     d9e:	78 85       	ldd	r23, Y+8	; 0x08
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	3f ef       	ldi	r19, 0xFF	; 255
     da8:	4f e7       	ldi	r20, 0x7F	; 127
     daa:	57 e4       	ldi	r21, 0x47	; 71
     dac:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     db0:	18 16       	cp	r1, r24
     db2:	4c f5       	brge	.+82     	; 0xe06 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db4:	6b 85       	ldd	r22, Y+11	; 0x0b
     db6:	7c 85       	ldd	r23, Y+12	; 0x0c
     db8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dba:	9e 85       	ldd	r25, Y+14	; 0x0e
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e2       	ldi	r20, 0x20	; 32
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9e 83       	std	Y+6, r25	; 0x06
     dda:	8d 83       	std	Y+5, r24	; 0x05
     ddc:	0f c0       	rjmp	.+30     	; 0xdfc <CLCD_voidInit+0xc6>
     dde:	88 ec       	ldi	r24, 0xC8	; 200
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	9c 81       	ldd	r25, Y+4	; 0x04
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <CLCD_voidInit+0xb4>
     dee:	9c 83       	std	Y+4, r25	; 0x04
     df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	9e 83       	std	Y+6, r25	; 0x06
     dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfc:	8d 81       	ldd	r24, Y+5	; 0x05
     dfe:	9e 81       	ldd	r25, Y+6	; 0x06
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	69 f7       	brne	.-38     	; 0xdde <CLCD_voidInit+0xa8>
     e04:	14 c0       	rjmp	.+40     	; 0xe2e <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e06:	6f 81       	ldd	r22, Y+7	; 0x07
     e08:	78 85       	ldd	r23, Y+8	; 0x08
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	8d 83       	std	Y+5, r24	; 0x05
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	9e 81       	ldd	r25, Y+6	; 0x06
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <CLCD_voidInit+0xf0>
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);

	CLCD_voidSendCommand(CLCD_CMD_RETURN_HOME);
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>

	/*Function Set Command
	 * 8 bit mode
	 * Activate the 2 lines
	 * Font Type is 5x8 (5x7) */
	CLCD_voidSendCommand(CLCD_CMD_FUNCTION_SET);
     e34:	88 e2       	ldi	r24, 0x28	; 40
     e36:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>

	/*Display ON/OFF Control Command
	 *set display: ON
	 *Cursor is Disabled
	 *Cursor Blinking is OFF  */
	CLCD_voidSendCommand(CLCD_CMD_DISPLAY_ON_OFF_CTRL);
     e3a:	8c e0       	ldi	r24, 0x0C	; 12
     e3c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>

	/*Clearing LCD Display*/
	CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>

	/*Entry mode Set*/
	CLCD_voidSendCommand(CLCD_CMD_ENTRY_MODE_SET);
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>

}
     e4c:	2e 96       	adiw	r28, 0x0e	; 14
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <CLCD_voidSendCommand>:


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	e9 97       	sbiw	r28, 0x39	; 57
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	89 af       	std	Y+57, r24	; 0x39
	/*SET RS PIN TO LOW*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	63 e0       	ldi	r22, 0x03	; 3
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	_delay_ms(2);

	#elif CLCD_MODE == 4

	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Command,4));
     e7e:	89 ad       	ldd	r24, Y+57	; 0x39
     e80:	82 95       	swap	r24
     e82:	8f 70       	andi	r24, 0x0F	; 15
     e84:	98 2f       	mov	r25, r24
     e86:	91 70       	andi	r25, 0x01	; 1
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	49 2f       	mov	r20, r25
     e8e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Command,5));
     e92:	89 ad       	ldd	r24, Y+57	; 0x39
     e94:	82 95       	swap	r24
     e96:	86 95       	lsr	r24
     e98:	87 70       	andi	r24, 0x07	; 7
     e9a:	98 2f       	mov	r25, r24
     e9c:	91 70       	andi	r25, 0x01	; 1
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	49 2f       	mov	r20, r25
     ea4:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Command,6));
     ea8:	89 ad       	ldd	r24, Y+57	; 0x39
     eaa:	82 95       	swap	r24
     eac:	86 95       	lsr	r24
     eae:	86 95       	lsr	r24
     eb0:	83 70       	andi	r24, 0x03	; 3
     eb2:	98 2f       	mov	r25, r24
     eb4:	91 70       	andi	r25, 0x01	; 1
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	62 e0       	ldi	r22, 0x02	; 2
     eba:	49 2f       	mov	r20, r25
     ebc:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Command,7));
     ec0:	89 ad       	ldd	r24, Y+57	; 0x39
     ec2:	98 2f       	mov	r25, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	99 27       	eor	r25, r25
     ec8:	99 1f       	adc	r25, r25
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	64 e0       	ldi	r22, 0x04	; 4
     ece:	49 2f       	mov	r20, r25
     ed0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>


	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	62 e0       	ldi	r22, 0x02	; 2
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e4       	ldi	r27, 0x40	; 64
     ee6:	8d ab       	std	Y+53, r24	; 0x35
     ee8:	9e ab       	std	Y+54, r25	; 0x36
     eea:	af ab       	std	Y+55, r26	; 0x37
     eec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eee:	6d a9       	ldd	r22, Y+53	; 0x35
     ef0:	7e a9       	ldd	r23, Y+54	; 0x36
     ef2:	8f a9       	ldd	r24, Y+55	; 0x37
     ef4:	98 ad       	ldd	r25, Y+56	; 0x38
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	4a ef       	ldi	r20, 0xFA	; 250
     efc:	54 e4       	ldi	r21, 0x44	; 68
     efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	89 ab       	std	Y+49, r24	; 0x31
     f08:	9a ab       	std	Y+50, r25	; 0x32
     f0a:	ab ab       	std	Y+51, r26	; 0x33
     f0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f0e:	69 a9       	ldd	r22, Y+49	; 0x31
     f10:	7a a9       	ldd	r23, Y+50	; 0x32
     f12:	8b a9       	ldd	r24, Y+51	; 0x33
     f14:	9c a9       	ldd	r25, Y+52	; 0x34
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     f22:	88 23       	and	r24, r24
     f24:	2c f4       	brge	.+10     	; 0xf30 <CLCD_voidSendCommand+0xd2>
		__ticks = 1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	98 ab       	std	Y+48, r25	; 0x30
     f2c:	8f a7       	std	Y+47, r24	; 0x2f
     f2e:	3f c0       	rjmp	.+126    	; 0xfae <CLCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
     f30:	69 a9       	ldd	r22, Y+49	; 0x31
     f32:	7a a9       	ldd	r23, Y+50	; 0x32
     f34:	8b a9       	ldd	r24, Y+51	; 0x33
     f36:	9c a9       	ldd	r25, Y+52	; 0x34
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	3f ef       	ldi	r19, 0xFF	; 255
     f3c:	4f e7       	ldi	r20, 0x7F	; 127
     f3e:	57 e4       	ldi	r21, 0x47	; 71
     f40:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     f44:	18 16       	cp	r1, r24
     f46:	4c f5       	brge	.+82     	; 0xf9a <CLCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f48:	6d a9       	ldd	r22, Y+53	; 0x35
     f4a:	7e a9       	ldd	r23, Y+54	; 0x36
     f4c:	8f a9       	ldd	r24, Y+55	; 0x37
     f4e:	98 ad       	ldd	r25, Y+56	; 0x38
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e2       	ldi	r20, 0x20	; 32
     f56:	51 e4       	ldi	r21, 0x41	; 65
     f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	98 ab       	std	Y+48, r25	; 0x30
     f6e:	8f a7       	std	Y+47, r24	; 0x2f
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <CLCD_voidSendCommand+0x132>
     f72:	88 ec       	ldi	r24, 0xC8	; 200
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9e a7       	std	Y+46, r25	; 0x2e
     f78:	8d a7       	std	Y+45, r24	; 0x2d
     f7a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f7c:	9e a5       	ldd	r25, Y+46	; 0x2e
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <CLCD_voidSendCommand+0x120>
     f82:	9e a7       	std	Y+46, r25	; 0x2e
     f84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f86:	8f a5       	ldd	r24, Y+47	; 0x2f
     f88:	98 a9       	ldd	r25, Y+48	; 0x30
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	98 ab       	std	Y+48, r25	; 0x30
     f8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f90:	8f a5       	ldd	r24, Y+47	; 0x2f
     f92:	98 a9       	ldd	r25, Y+48	; 0x30
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	69 f7       	brne	.-38     	; 0xf72 <CLCD_voidSendCommand+0x114>
     f98:	14 c0       	rjmp	.+40     	; 0xfc2 <CLCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9a:	69 a9       	ldd	r22, Y+49	; 0x31
     f9c:	7a a9       	ldd	r23, Y+50	; 0x32
     f9e:	8b a9       	ldd	r24, Y+51	; 0x33
     fa0:	9c a9       	ldd	r25, Y+52	; 0x34
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	98 ab       	std	Y+48, r25	; 0x30
     fac:	8f a7       	std	Y+47, r24	; 0x2f
     fae:	8f a5       	ldd	r24, Y+47	; 0x2f
     fb0:	98 a9       	ldd	r25, Y+48	; 0x30
     fb2:	9c a7       	std	Y+44, r25	; 0x2c
     fb4:	8b a7       	std	Y+43, r24	; 0x2b
     fb6:	8b a5       	ldd	r24, Y+43	; 0x2b
     fb8:	9c a5       	ldd	r25, Y+44	; 0x2c
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <CLCD_voidSendCommand+0x15c>
     fbe:	9c a7       	std	Y+44, r25	; 0x2c
     fc0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	62 e0       	ldi	r22, 0x02	; 2
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	b0 e4       	ldi	r27, 0x40	; 64
     fd4:	8f a3       	std	Y+39, r24	; 0x27
     fd6:	98 a7       	std	Y+40, r25	; 0x28
     fd8:	a9 a7       	std	Y+41, r26	; 0x29
     fda:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fdc:	6f a1       	ldd	r22, Y+39	; 0x27
     fde:	78 a5       	ldd	r23, Y+40	; 0x28
     fe0:	89 a5       	ldd	r24, Y+41	; 0x29
     fe2:	9a a5       	ldd	r25, Y+42	; 0x2a
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	4a ef       	ldi	r20, 0xFA	; 250
     fea:	54 e4       	ldi	r21, 0x44	; 68
     fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8b a3       	std	Y+35, r24	; 0x23
     ff6:	9c a3       	std	Y+36, r25	; 0x24
     ff8:	ad a3       	std	Y+37, r26	; 0x25
     ffa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ffc:	6b a1       	ldd	r22, Y+35	; 0x23
     ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    1000:	8d a1       	ldd	r24, Y+37	; 0x25
    1002:	9e a1       	ldd	r25, Y+38	; 0x26
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1010:	88 23       	and	r24, r24
    1012:	2c f4       	brge	.+10     	; 0x101e <CLCD_voidSendCommand+0x1c0>
		__ticks = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9a a3       	std	Y+34, r25	; 0x22
    101a:	89 a3       	std	Y+33, r24	; 0x21
    101c:	3f c0       	rjmp	.+126    	; 0x109c <CLCD_voidSendCommand+0x23e>
	else if (__tmp > 65535)
    101e:	6b a1       	ldd	r22, Y+35	; 0x23
    1020:	7c a1       	ldd	r23, Y+36	; 0x24
    1022:	8d a1       	ldd	r24, Y+37	; 0x25
    1024:	9e a1       	ldd	r25, Y+38	; 0x26
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	57 e4       	ldi	r21, 0x47	; 71
    102e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1032:	18 16       	cp	r1, r24
    1034:	4c f5       	brge	.+82     	; 0x1088 <CLCD_voidSendCommand+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1036:	6f a1       	ldd	r22, Y+39	; 0x27
    1038:	78 a5       	ldd	r23, Y+40	; 0x28
    103a:	89 a5       	ldd	r24, Y+41	; 0x29
    103c:	9a a5       	ldd	r25, Y+42	; 0x2a
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e2       	ldi	r20, 0x20	; 32
    1044:	51 e4       	ldi	r21, 0x41	; 65
    1046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9a a3       	std	Y+34, r25	; 0x22
    105c:	89 a3       	std	Y+33, r24	; 0x21
    105e:	0f c0       	rjmp	.+30     	; 0x107e <CLCD_voidSendCommand+0x220>
    1060:	88 ec       	ldi	r24, 0xC8	; 200
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	98 a3       	std	Y+32, r25	; 0x20
    1066:	8f 8f       	std	Y+31, r24	; 0x1f
    1068:	8f 8d       	ldd	r24, Y+31	; 0x1f
    106a:	98 a1       	ldd	r25, Y+32	; 0x20
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <CLCD_voidSendCommand+0x20e>
    1070:	98 a3       	std	Y+32, r25	; 0x20
    1072:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1074:	89 a1       	ldd	r24, Y+33	; 0x21
    1076:	9a a1       	ldd	r25, Y+34	; 0x22
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	9a a3       	std	Y+34, r25	; 0x22
    107c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107e:	89 a1       	ldd	r24, Y+33	; 0x21
    1080:	9a a1       	ldd	r25, Y+34	; 0x22
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	69 f7       	brne	.-38     	; 0x1060 <CLCD_voidSendCommand+0x202>
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <CLCD_voidSendCommand+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1088:	6b a1       	ldd	r22, Y+35	; 0x23
    108a:	7c a1       	ldd	r23, Y+36	; 0x24
    108c:	8d a1       	ldd	r24, Y+37	; 0x25
    108e:	9e a1       	ldd	r25, Y+38	; 0x26
    1090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9a a3       	std	Y+34, r25	; 0x22
    109a:	89 a3       	std	Y+33, r24	; 0x21
    109c:	89 a1       	ldd	r24, Y+33	; 0x21
    109e:	9a a1       	ldd	r25, Y+34	; 0x22
    10a0:	9e 8f       	std	Y+30, r25	; 0x1e
    10a2:	8d 8f       	std	Y+29, r24	; 0x1d
    10a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <CLCD_voidSendCommand+0x24a>
    10ac:	9e 8f       	std	Y+30, r25	; 0x1e
    10ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Command,0));
    10b0:	89 ad       	ldd	r24, Y+57	; 0x39
    10b2:	98 2f       	mov	r25, r24
    10b4:	91 70       	andi	r25, 0x01	; 1
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	49 2f       	mov	r20, r25
    10bc:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Command,1));
    10c0:	89 ad       	ldd	r24, Y+57	; 0x39
    10c2:	86 95       	lsr	r24
    10c4:	98 2f       	mov	r25, r24
    10c6:	91 70       	andi	r25, 0x01	; 1
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	49 2f       	mov	r20, r25
    10ce:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Command,2));
    10d2:	89 ad       	ldd	r24, Y+57	; 0x39
    10d4:	86 95       	lsr	r24
    10d6:	86 95       	lsr	r24
    10d8:	98 2f       	mov	r25, r24
    10da:	91 70       	andi	r25, 0x01	; 1
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	62 e0       	ldi	r22, 0x02	; 2
    10e0:	49 2f       	mov	r20, r25
    10e2:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Command,3));
    10e6:	89 ad       	ldd	r24, Y+57	; 0x39
    10e8:	86 95       	lsr	r24
    10ea:	86 95       	lsr	r24
    10ec:	86 95       	lsr	r24
    10ee:	98 2f       	mov	r25, r24
    10f0:	91 70       	andi	r25, 0x01	; 1
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	64 e0       	ldi	r22, 0x04	; 4
    10f6:	49 2f       	mov	r20, r25
    10f8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>

	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	62 e0       	ldi	r22, 0x02	; 2
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e4       	ldi	r27, 0x40	; 64
    110e:	89 8f       	std	Y+25, r24	; 0x19
    1110:	9a 8f       	std	Y+26, r25	; 0x1a
    1112:	ab 8f       	std	Y+27, r26	; 0x1b
    1114:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	69 8d       	ldd	r22, Y+25	; 0x19
    1118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    111a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    111c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a ef       	ldi	r20, 0xFA	; 250
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8d 8b       	std	Y+21, r24	; 0x15
    1130:	9e 8b       	std	Y+22, r25	; 0x16
    1132:	af 8b       	std	Y+23, r26	; 0x17
    1134:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1136:	6d 89       	ldd	r22, Y+21	; 0x15
    1138:	7e 89       	ldd	r23, Y+22	; 0x16
    113a:	8f 89       	ldd	r24, Y+23	; 0x17
    113c:	98 8d       	ldd	r25, Y+24	; 0x18
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <CLCD_voidSendCommand+0x2fa>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9c 8b       	std	Y+20, r25	; 0x14
    1154:	8b 8b       	std	Y+19, r24	; 0x13
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <CLCD_voidSendCommand+0x378>
	else if (__tmp > 65535)
    1158:	6d 89       	ldd	r22, Y+21	; 0x15
    115a:	7e 89       	ldd	r23, Y+22	; 0x16
    115c:	8f 89       	ldd	r24, Y+23	; 0x17
    115e:	98 8d       	ldd	r25, Y+24	; 0x18
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <CLCD_voidSendCommand+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	69 8d       	ldd	r22, Y+25	; 0x19
    1172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9c 8b       	std	Y+20, r25	; 0x14
    1196:	8b 8b       	std	Y+19, r24	; 0x13
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <CLCD_voidSendCommand+0x35a>
    119a:	88 ec       	ldi	r24, 0xC8	; 200
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9a 8b       	std	Y+18, r25	; 0x12
    11a0:	89 8b       	std	Y+17, r24	; 0x11
    11a2:	89 89       	ldd	r24, Y+17	; 0x11
    11a4:	9a 89       	ldd	r25, Y+18	; 0x12
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <CLCD_voidSendCommand+0x348>
    11aa:	9a 8b       	std	Y+18, r25	; 0x12
    11ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8b 89       	ldd	r24, Y+19	; 0x13
    11b0:	9c 89       	ldd	r25, Y+20	; 0x14
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9c 8b       	std	Y+20, r25	; 0x14
    11b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ba:	9c 89       	ldd	r25, Y+20	; 0x14
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <CLCD_voidSendCommand+0x33c>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <CLCD_voidSendCommand+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6d 89       	ldd	r22, Y+21	; 0x15
    11c4:	7e 89       	ldd	r23, Y+22	; 0x16
    11c6:	8f 89       	ldd	r24, Y+23	; 0x17
    11c8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	8b 89       	ldd	r24, Y+19	; 0x13
    11d8:	9c 89       	ldd	r25, Y+20	; 0x14
    11da:	98 8b       	std	Y+16, r25	; 0x10
    11dc:	8f 87       	std	Y+15, r24	; 0x0f
    11de:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e0:	98 89       	ldd	r25, Y+16	; 0x10
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <CLCD_voidSendCommand+0x384>
    11e6:	98 8b       	std	Y+16, r25	; 0x10
    11e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	62 e0       	ldi	r22, 0x02	; 2
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e4       	ldi	r27, 0x40	; 64
    11fc:	8b 87       	std	Y+11, r24	; 0x0b
    11fe:	9c 87       	std	Y+12, r25	; 0x0c
    1200:	ad 87       	std	Y+13, r26	; 0x0d
    1202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1204:	6b 85       	ldd	r22, Y+11	; 0x0b
    1206:	7c 85       	ldd	r23, Y+12	; 0x0c
    1208:	8d 85       	ldd	r24, Y+13	; 0x0d
    120a:	9e 85       	ldd	r25, Y+14	; 0x0e
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	4a ef       	ldi	r20, 0xFA	; 250
    1212:	54 e4       	ldi	r21, 0x44	; 68
    1214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	8f 83       	std	Y+7, r24	; 0x07
    121e:	98 87       	std	Y+8, r25	; 0x08
    1220:	a9 87       	std	Y+9, r26	; 0x09
    1222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1224:	6f 81       	ldd	r22, Y+7	; 0x07
    1226:	78 85       	ldd	r23, Y+8	; 0x08
    1228:	89 85       	ldd	r24, Y+9	; 0x09
    122a:	9a 85       	ldd	r25, Y+10	; 0x0a
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e8       	ldi	r20, 0x80	; 128
    1232:	5f e3       	ldi	r21, 0x3F	; 63
    1234:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1238:	88 23       	and	r24, r24
    123a:	2c f4       	brge	.+10     	; 0x1246 <CLCD_voidSendCommand+0x3e8>
		__ticks = 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	3f c0       	rjmp	.+126    	; 0x12c4 <CLCD_voidSendCommand+0x466>
	else if (__tmp > 65535)
    1246:	6f 81       	ldd	r22, Y+7	; 0x07
    1248:	78 85       	ldd	r23, Y+8	; 0x08
    124a:	89 85       	ldd	r24, Y+9	; 0x09
    124c:	9a 85       	ldd	r25, Y+10	; 0x0a
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	3f ef       	ldi	r19, 0xFF	; 255
    1252:	4f e7       	ldi	r20, 0x7F	; 127
    1254:	57 e4       	ldi	r21, 0x47	; 71
    1256:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    125a:	18 16       	cp	r1, r24
    125c:	4c f5       	brge	.+82     	; 0x12b0 <CLCD_voidSendCommand+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1260:	7c 85       	ldd	r23, Y+12	; 0x0c
    1262:	8d 85       	ldd	r24, Y+13	; 0x0d
    1264:	9e 85       	ldd	r25, Y+14	; 0x0e
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e2       	ldi	r20, 0x20	; 32
    126c:	51 e4       	ldi	r21, 0x41	; 65
    126e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	0f c0       	rjmp	.+30     	; 0x12a6 <CLCD_voidSendCommand+0x448>
    1288:	88 ec       	ldi	r24, 0xC8	; 200
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	8b 83       	std	Y+3, r24	; 0x03
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <CLCD_voidSendCommand+0x436>
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	9e 83       	std	Y+6, r25	; 0x06
    12a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	69 f7       	brne	.-38     	; 0x1288 <CLCD_voidSendCommand+0x42a>
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <CLCD_voidSendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b0:	6f 81       	ldd	r22, Y+7	; 0x07
    12b2:	78 85       	ldd	r23, Y+8	; 0x08
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <CLCD_voidSendCommand+0x472>
    12d4:	9a 83       	std	Y+2, r25	; 0x02
    12d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	#else
	#endif

}
    12d8:	e9 96       	adiw	r28, 0x39	; 57
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	e9 97       	sbiw	r28, 0x39	; 57
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	89 af       	std	Y+57, r24	; 0x39
	/*SET RS PIN TO HIGH*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	63 e0       	ldi	r22, 0x03	; 3
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
	_delay_ms(2);

	#elif CLCD_MODE == 4
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Data,4));
    130a:	89 ad       	ldd	r24, Y+57	; 0x39
    130c:	82 95       	swap	r24
    130e:	8f 70       	andi	r24, 0x0F	; 15
    1310:	98 2f       	mov	r25, r24
    1312:	91 70       	andi	r25, 0x01	; 1
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	49 2f       	mov	r20, r25
    131a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Data,5));
    131e:	89 ad       	ldd	r24, Y+57	; 0x39
    1320:	82 95       	swap	r24
    1322:	86 95       	lsr	r24
    1324:	87 70       	andi	r24, 0x07	; 7
    1326:	98 2f       	mov	r25, r24
    1328:	91 70       	andi	r25, 0x01	; 1
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	49 2f       	mov	r20, r25
    1330:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Data,6));
    1334:	89 ad       	ldd	r24, Y+57	; 0x39
    1336:	82 95       	swap	r24
    1338:	86 95       	lsr	r24
    133a:	86 95       	lsr	r24
    133c:	83 70       	andi	r24, 0x03	; 3
    133e:	98 2f       	mov	r25, r24
    1340:	91 70       	andi	r25, 0x01	; 1
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	62 e0       	ldi	r22, 0x02	; 2
    1346:	49 2f       	mov	r20, r25
    1348:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Data,7));
    134c:	89 ad       	ldd	r24, Y+57	; 0x39
    134e:	98 2f       	mov	r25, r24
    1350:	99 1f       	adc	r25, r25
    1352:	99 27       	eor	r25, r25
    1354:	99 1f       	adc	r25, r25
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	64 e0       	ldi	r22, 0x04	; 4
    135a:	49 2f       	mov	r20, r25
    135c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>


	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	62 e0       	ldi	r22, 0x02	; 2
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a0 e0       	ldi	r26, 0x00	; 0
    1370:	b0 e4       	ldi	r27, 0x40	; 64
    1372:	8d ab       	std	Y+53, r24	; 0x35
    1374:	9e ab       	std	Y+54, r25	; 0x36
    1376:	af ab       	std	Y+55, r26	; 0x37
    1378:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137a:	6d a9       	ldd	r22, Y+53	; 0x35
    137c:	7e a9       	ldd	r23, Y+54	; 0x36
    137e:	8f a9       	ldd	r24, Y+55	; 0x37
    1380:	98 ad       	ldd	r25, Y+56	; 0x38
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	4a ef       	ldi	r20, 0xFA	; 250
    1388:	54 e4       	ldi	r21, 0x44	; 68
    138a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	89 ab       	std	Y+49, r24	; 0x31
    1394:	9a ab       	std	Y+50, r25	; 0x32
    1396:	ab ab       	std	Y+51, r26	; 0x33
    1398:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    139a:	69 a9       	ldd	r22, Y+49	; 0x31
    139c:	7a a9       	ldd	r23, Y+50	; 0x32
    139e:	8b a9       	ldd	r24, Y+51	; 0x33
    13a0:	9c a9       	ldd	r25, Y+52	; 0x34
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e8       	ldi	r20, 0x80	; 128
    13a8:	5f e3       	ldi	r21, 0x3F	; 63
    13aa:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    13ae:	88 23       	and	r24, r24
    13b0:	2c f4       	brge	.+10     	; 0x13bc <CLCD_voidSendData+0xd2>
		__ticks = 1;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	98 ab       	std	Y+48, r25	; 0x30
    13b8:	8f a7       	std	Y+47, r24	; 0x2f
    13ba:	3f c0       	rjmp	.+126    	; 0x143a <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    13bc:	69 a9       	ldd	r22, Y+49	; 0x31
    13be:	7a a9       	ldd	r23, Y+50	; 0x32
    13c0:	8b a9       	ldd	r24, Y+51	; 0x33
    13c2:	9c a9       	ldd	r25, Y+52	; 0x34
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	3f ef       	ldi	r19, 0xFF	; 255
    13c8:	4f e7       	ldi	r20, 0x7F	; 127
    13ca:	57 e4       	ldi	r21, 0x47	; 71
    13cc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    13d0:	18 16       	cp	r1, r24
    13d2:	4c f5       	brge	.+82     	; 0x1426 <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d4:	6d a9       	ldd	r22, Y+53	; 0x35
    13d6:	7e a9       	ldd	r23, Y+54	; 0x36
    13d8:	8f a9       	ldd	r24, Y+55	; 0x37
    13da:	98 ad       	ldd	r25, Y+56	; 0x38
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e2       	ldi	r20, 0x20	; 32
    13e2:	51 e4       	ldi	r21, 0x41	; 65
    13e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	98 ab       	std	Y+48, r25	; 0x30
    13fa:	8f a7       	std	Y+47, r24	; 0x2f
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <CLCD_voidSendData+0x132>
    13fe:	88 ec       	ldi	r24, 0xC8	; 200
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9e a7       	std	Y+46, r25	; 0x2e
    1404:	8d a7       	std	Y+45, r24	; 0x2d
    1406:	8d a5       	ldd	r24, Y+45	; 0x2d
    1408:	9e a5       	ldd	r25, Y+46	; 0x2e
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	f1 f7       	brne	.-4      	; 0x140a <CLCD_voidSendData+0x120>
    140e:	9e a7       	std	Y+46, r25	; 0x2e
    1410:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1412:	8f a5       	ldd	r24, Y+47	; 0x2f
    1414:	98 a9       	ldd	r25, Y+48	; 0x30
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	98 ab       	std	Y+48, r25	; 0x30
    141a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141c:	8f a5       	ldd	r24, Y+47	; 0x2f
    141e:	98 a9       	ldd	r25, Y+48	; 0x30
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	69 f7       	brne	.-38     	; 0x13fe <CLCD_voidSendData+0x114>
    1424:	14 c0       	rjmp	.+40     	; 0x144e <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1426:	69 a9       	ldd	r22, Y+49	; 0x31
    1428:	7a a9       	ldd	r23, Y+50	; 0x32
    142a:	8b a9       	ldd	r24, Y+51	; 0x33
    142c:	9c a9       	ldd	r25, Y+52	; 0x34
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	98 ab       	std	Y+48, r25	; 0x30
    1438:	8f a7       	std	Y+47, r24	; 0x2f
    143a:	8f a5       	ldd	r24, Y+47	; 0x2f
    143c:	98 a9       	ldd	r25, Y+48	; 0x30
    143e:	9c a7       	std	Y+44, r25	; 0x2c
    1440:	8b a7       	std	Y+43, r24	; 0x2b
    1442:	8b a5       	ldd	r24, Y+43	; 0x2b
    1444:	9c a5       	ldd	r25, Y+44	; 0x2c
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <CLCD_voidSendData+0x15c>
    144a:	9c a7       	std	Y+44, r25	; 0x2c
    144c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	62 e0       	ldi	r22, 0x02	; 2
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a0 e0       	ldi	r26, 0x00	; 0
    145e:	b0 e4       	ldi	r27, 0x40	; 64
    1460:	8f a3       	std	Y+39, r24	; 0x27
    1462:	98 a7       	std	Y+40, r25	; 0x28
    1464:	a9 a7       	std	Y+41, r26	; 0x29
    1466:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1468:	6f a1       	ldd	r22, Y+39	; 0x27
    146a:	78 a5       	ldd	r23, Y+40	; 0x28
    146c:	89 a5       	ldd	r24, Y+41	; 0x29
    146e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	4a ef       	ldi	r20, 0xFA	; 250
    1476:	54 e4       	ldi	r21, 0x44	; 68
    1478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8b a3       	std	Y+35, r24	; 0x23
    1482:	9c a3       	std	Y+36, r25	; 0x24
    1484:	ad a3       	std	Y+37, r26	; 0x25
    1486:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1488:	6b a1       	ldd	r22, Y+35	; 0x23
    148a:	7c a1       	ldd	r23, Y+36	; 0x24
    148c:	8d a1       	ldd	r24, Y+37	; 0x25
    148e:	9e a1       	ldd	r25, Y+38	; 0x26
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    149c:	88 23       	and	r24, r24
    149e:	2c f4       	brge	.+10     	; 0x14aa <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9a a3       	std	Y+34, r25	; 0x22
    14a6:	89 a3       	std	Y+33, r24	; 0x21
    14a8:	3f c0       	rjmp	.+126    	; 0x1528 <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    14aa:	6b a1       	ldd	r22, Y+35	; 0x23
    14ac:	7c a1       	ldd	r23, Y+36	; 0x24
    14ae:	8d a1       	ldd	r24, Y+37	; 0x25
    14b0:	9e a1       	ldd	r25, Y+38	; 0x26
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	4f e7       	ldi	r20, 0x7F	; 127
    14b8:	57 e4       	ldi	r21, 0x47	; 71
    14ba:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    14be:	18 16       	cp	r1, r24
    14c0:	4c f5       	brge	.+82     	; 0x1514 <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c2:	6f a1       	ldd	r22, Y+39	; 0x27
    14c4:	78 a5       	ldd	r23, Y+40	; 0x28
    14c6:	89 a5       	ldd	r24, Y+41	; 0x29
    14c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9a a3       	std	Y+34, r25	; 0x22
    14e8:	89 a3       	std	Y+33, r24	; 0x21
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <CLCD_voidSendData+0x220>
    14ec:	88 ec       	ldi	r24, 0xC8	; 200
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	98 a3       	std	Y+32, r25	; 0x20
    14f2:	8f 8f       	std	Y+31, r24	; 0x1f
    14f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14f6:	98 a1       	ldd	r25, Y+32	; 0x20
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <CLCD_voidSendData+0x20e>
    14fc:	98 a3       	std	Y+32, r25	; 0x20
    14fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1500:	89 a1       	ldd	r24, Y+33	; 0x21
    1502:	9a a1       	ldd	r25, Y+34	; 0x22
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	9a a3       	std	Y+34, r25	; 0x22
    1508:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150a:	89 a1       	ldd	r24, Y+33	; 0x21
    150c:	9a a1       	ldd	r25, Y+34	; 0x22
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	69 f7       	brne	.-38     	; 0x14ec <CLCD_voidSendData+0x202>
    1512:	14 c0       	rjmp	.+40     	; 0x153c <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1514:	6b a1       	ldd	r22, Y+35	; 0x23
    1516:	7c a1       	ldd	r23, Y+36	; 0x24
    1518:	8d a1       	ldd	r24, Y+37	; 0x25
    151a:	9e a1       	ldd	r25, Y+38	; 0x26
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9a a3       	std	Y+34, r25	; 0x22
    1526:	89 a3       	std	Y+33, r24	; 0x21
    1528:	89 a1       	ldd	r24, Y+33	; 0x21
    152a:	9a a1       	ldd	r25, Y+34	; 0x22
    152c:	9e 8f       	std	Y+30, r25	; 0x1e
    152e:	8d 8f       	std	Y+29, r24	; 0x1d
    1530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1532:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <CLCD_voidSendData+0x24a>
    1538:	9e 8f       	std	Y+30, r25	; 0x1e
    153a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Data,0));
    153c:	89 ad       	ldd	r24, Y+57	; 0x39
    153e:	98 2f       	mov	r25, r24
    1540:	91 70       	andi	r25, 0x01	; 1
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	49 2f       	mov	r20, r25
    1548:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Data,1));
    154c:	89 ad       	ldd	r24, Y+57	; 0x39
    154e:	86 95       	lsr	r24
    1550:	98 2f       	mov	r25, r24
    1552:	91 70       	andi	r25, 0x01	; 1
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	49 2f       	mov	r20, r25
    155a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Data,2));
    155e:	89 ad       	ldd	r24, Y+57	; 0x39
    1560:	86 95       	lsr	r24
    1562:	86 95       	lsr	r24
    1564:	98 2f       	mov	r25, r24
    1566:	91 70       	andi	r25, 0x01	; 1
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	49 2f       	mov	r20, r25
    156e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Data,3));
    1572:	89 ad       	ldd	r24, Y+57	; 0x39
    1574:	86 95       	lsr	r24
    1576:	86 95       	lsr	r24
    1578:	86 95       	lsr	r24
    157a:	98 2f       	mov	r25, r24
    157c:	91 70       	andi	r25, 0x01	; 1
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	64 e0       	ldi	r22, 0x04	; 4
    1582:	49 2f       	mov	r20, r25
    1584:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>

	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a0 e0       	ldi	r26, 0x00	; 0
    1598:	b0 e4       	ldi	r27, 0x40	; 64
    159a:	89 8f       	std	Y+25, r24	; 0x19
    159c:	9a 8f       	std	Y+26, r25	; 0x1a
    159e:	ab 8f       	std	Y+27, r26	; 0x1b
    15a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	69 8d       	ldd	r22, Y+25	; 0x19
    15a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a ef       	ldi	r20, 0xFA	; 250
    15b0:	54 e4       	ldi	r21, 0x44	; 68
    15b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8d 8b       	std	Y+21, r24	; 0x15
    15bc:	9e 8b       	std	Y+22, r25	; 0x16
    15be:	af 8b       	std	Y+23, r26	; 0x17
    15c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15c2:	6d 89       	ldd	r22, Y+21	; 0x15
    15c4:	7e 89       	ldd	r23, Y+22	; 0x16
    15c6:	8f 89       	ldd	r24, Y+23	; 0x17
    15c8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9c 8b       	std	Y+20, r25	; 0x14
    15e0:	8b 8b       	std	Y+19, r24	; 0x13
    15e2:	3f c0       	rjmp	.+126    	; 0x1662 <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    15e4:	6d 89       	ldd	r22, Y+21	; 0x15
    15e6:	7e 89       	ldd	r23, Y+22	; 0x16
    15e8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ea:	98 8d       	ldd	r25, Y+24	; 0x18
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	4c f5       	brge	.+82     	; 0x164e <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	69 8d       	ldd	r22, Y+25	; 0x19
    15fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9c 8b       	std	Y+20, r25	; 0x14
    1622:	8b 8b       	std	Y+19, r24	; 0x13
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <CLCD_voidSendData+0x35a>
    1626:	88 ec       	ldi	r24, 0xC8	; 200
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9a 8b       	std	Y+18, r25	; 0x12
    162c:	89 8b       	std	Y+17, r24	; 0x11
    162e:	89 89       	ldd	r24, Y+17	; 0x11
    1630:	9a 89       	ldd	r25, Y+18	; 0x12
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <CLCD_voidSendData+0x348>
    1636:	9a 8b       	std	Y+18, r25	; 0x12
    1638:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163a:	8b 89       	ldd	r24, Y+19	; 0x13
    163c:	9c 89       	ldd	r25, Y+20	; 0x14
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	9c 8b       	std	Y+20, r25	; 0x14
    1642:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1644:	8b 89       	ldd	r24, Y+19	; 0x13
    1646:	9c 89       	ldd	r25, Y+20	; 0x14
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	69 f7       	brne	.-38     	; 0x1626 <CLCD_voidSendData+0x33c>
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164e:	6d 89       	ldd	r22, Y+21	; 0x15
    1650:	7e 89       	ldd	r23, Y+22	; 0x16
    1652:	8f 89       	ldd	r24, Y+23	; 0x17
    1654:	98 8d       	ldd	r25, Y+24	; 0x18
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9c 8b       	std	Y+20, r25	; 0x14
    1660:	8b 8b       	std	Y+19, r24	; 0x13
    1662:	8b 89       	ldd	r24, Y+19	; 0x13
    1664:	9c 89       	ldd	r25, Y+20	; 0x14
    1666:	98 8b       	std	Y+16, r25	; 0x10
    1668:	8f 87       	std	Y+15, r24	; 0x0f
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <CLCD_voidSendData+0x384>
    1672:	98 8b       	std	Y+16, r25	; 0x10
    1674:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e0       	ldi	r26, 0x00	; 0
    1686:	b0 e4       	ldi	r27, 0x40	; 64
    1688:	8b 87       	std	Y+11, r24	; 0x0b
    168a:	9c 87       	std	Y+12, r25	; 0x0c
    168c:	ad 87       	std	Y+13, r26	; 0x0d
    168e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	6b 85       	ldd	r22, Y+11	; 0x0b
    1692:	7c 85       	ldd	r23, Y+12	; 0x0c
    1694:	8d 85       	ldd	r24, Y+13	; 0x0d
    1696:	9e 85       	ldd	r25, Y+14	; 0x0e
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a ef       	ldi	r20, 0xFA	; 250
    169e:	54 e4       	ldi	r21, 0x44	; 68
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8f 83       	std	Y+7, r24	; 0x07
    16aa:	98 87       	std	Y+8, r25	; 0x08
    16ac:	a9 87       	std	Y+9, r26	; 0x09
    16ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b0:	6f 81       	ldd	r22, Y+7	; 0x07
    16b2:	78 85       	ldd	r23, Y+8	; 0x08
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <CLCD_voidSendData+0x448>
    1714:	88 ec       	ldi	r24, 0xC8	; 200
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <CLCD_voidSendData+0x436>
    1724:	9c 83       	std	Y+4, r25	; 0x04
    1726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <CLCD_voidSendData+0x42a>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <CLCD_voidSendData+0x472>
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01

	#else

	#endif

}
    1764:	e9 96       	adiw	r28, 0x39	; 57
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <CLCD_voidSendString>:


void CLCD_voidSendString(const char* Copy_PtrString)
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <CLCD_voidSendString+0x6>
    177c:	0f 92       	push	r0
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	9b 83       	std	Y+3, r25	; 0x03
    1784:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i = 0; Copy_PtrString[i] !='\0'; i++)
    1786:	19 82       	std	Y+1, r1	; 0x01
    1788:	0e c0       	rjmp	.+28     	; 0x17a6 <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(Copy_PtrString[i]);
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	9b 81       	ldd	r25, Y+3	; 0x03
    1794:	fc 01       	movw	r30, r24
    1796:	e2 0f       	add	r30, r18
    1798:	f3 1f       	adc	r31, r19
    179a:	80 81       	ld	r24, Z
    179c:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
}


void CLCD_voidSendString(const char* Copy_PtrString)
{
	for (u8 i = 0; Copy_PtrString[i] !='\0'; i++)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	9b 81       	ldd	r25, Y+3	; 0x03
    17b0:	fc 01       	movw	r30, r24
    17b2:	e2 0f       	add	r30, r18
    17b4:	f3 1f       	adc	r31, r19
    17b6:	80 81       	ld	r24, Z
    17b8:	88 23       	and	r24, r24
    17ba:	39 f7       	brne	.-50     	; 0x178a <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_PtrString[i]);
	}
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <CLCD_voidSendInteger>:



void CLCD_voidSendInteger(u16 Copy_Number)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	2b 97       	sbiw	r28, 0x0b	; 11
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	9b 87       	std	Y+11, r25	; 0x0b
    17de:	8a 87       	std	Y+10, r24	; 0x0a
	if (!Copy_Number)
    17e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	19 f4       	brne	.+6      	; 0x17ee <CLCD_voidSendInteger+0x26>
		CLCD_voidSendData('0');
    17e8:	80 e3       	ldi	r24, 0x30	; 48
    17ea:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
	//reversing number
	u16 Local_u16Number = Copy_Number;
    17ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f2:	9c 83       	std	Y+4, r25	; 0x04
    17f4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Array[5];
	u8 Local_i1, Local_i2;
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
    17f6:	1a 82       	std	Y+2, r1	; 0x02
    17f8:	1d c0       	rjmp	.+58     	; 0x1834 <CLCD_voidSendInteger+0x6c>
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	e8 2f       	mov	r30, r24
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	2a e0       	ldi	r18, 0x0A	; 10
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	b9 01       	movw	r22, r18
    180a:	0e 94 af 14 	call	0x295e	; 0x295e <__udivmodhi4>
    180e:	28 2f       	mov	r18, r24
    1810:	ce 01       	movw	r24, r28
    1812:	05 96       	adiw	r24, 0x05	; 5
    1814:	e8 0f       	add	r30, r24
    1816:	f9 1f       	adc	r31, r25
    1818:	20 83       	st	Z, r18
		Local_u16Number /=10;
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	2a e0       	ldi	r18, 0x0A	; 10
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	b9 01       	movw	r22, r18
    1824:	0e 94 af 14 	call	0x295e	; 0x295e <__udivmodhi4>
    1828:	cb 01       	movw	r24, r22
    182a:	9c 83       	std	Y+4, r25	; 0x04
    182c:	8b 83       	std	Y+3, r24	; 0x03
		CLCD_voidSendData('0');
	//reversing number
	u16 Local_u16Number = Copy_Number;
	u8 Local_u8Array[5];
	u8 Local_i1, Local_i2;
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	f9 f6       	brne	.-66     	; 0x17fa <CLCD_voidSendInteger+0x32>
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
		Local_u16Number /=10;
	}
	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	12 c0       	rjmp	.+36     	; 0x1866 <CLCD_voidSendInteger+0x9e>
	{
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9c 01       	movw	r18, r24
    184a:	21 50       	subi	r18, 0x01	; 1
    184c:	30 40       	sbci	r19, 0x00	; 0
    184e:	ce 01       	movw	r24, r28
    1850:	05 96       	adiw	r24, 0x05	; 5
    1852:	fc 01       	movw	r30, r24
    1854:	e2 0f       	add	r30, r18
    1856:	f3 1f       	adc	r31, r19
    1858:	80 81       	ld	r24, Z
    185a:	80 5d       	subi	r24, 0xD0	; 208
    185c:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
		Local_u16Number /=10;
	}
	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	81 50       	subi	r24, 0x01	; 1
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	88 23       	and	r24, r24
    186a:	59 f7       	brne	.-42     	; 0x1842 <CLCD_voidSendInteger+0x7a>
	{
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
	}

}
    186c:	2b 96       	adiw	r28, 0x0b	; 11
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <CLCD_voidSendDecimalNumber>:

void CLCD_voidSendDecimalNumber(f32 Copy_Number)
{
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	6a 97       	sbiw	r28, 0x1a	; 26
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	6e 8b       	std	Y+22, r22	; 0x16
    1898:	7f 8b       	std	Y+23, r23	; 0x17
    189a:	88 8f       	std	Y+24, r24	; 0x18
    189c:	99 8f       	std	Y+25, r25	; 0x19
	if (!Copy_Number)
    189e:	1a 8e       	std	Y+26, r1	; 0x1a
    18a0:	6e 89       	ldd	r22, Y+22	; 0x16
    18a2:	7f 89       	ldd	r23, Y+23	; 0x17
    18a4:	88 8d       	ldd	r24, Y+24	; 0x18
    18a6:	99 8d       	ldd	r25, Y+25	; 0x19
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    18b4:	88 23       	and	r24, r24
    18b6:	11 f0       	breq	.+4      	; 0x18bc <CLCD_voidSendDecimalNumber+0x3e>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	8a 8f       	std	Y+26, r24	; 0x1a
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18c0:	89 27       	eor	r24, r25
    18c2:	88 23       	and	r24, r24
    18c4:	19 f0       	breq	.+6      	; 0x18cc <CLCD_voidSendDecimalNumber+0x4e>
		CLCD_voidSendData('0');
    18c6:	80 e3       	ldi	r24, 0x30	; 48
    18c8:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
	//reversing number
	f32 Local_f32Number = Copy_Number;
    18cc:	8e 89       	ldd	r24, Y+22	; 0x16
    18ce:	9f 89       	ldd	r25, Y+23	; 0x17
    18d0:	a8 8d       	ldd	r26, Y+24	; 0x18
    18d2:	b9 8d       	ldd	r27, Y+25	; 0x19
    18d4:	88 87       	std	Y+8, r24	; 0x08
    18d6:	99 87       	std	Y+9, r25	; 0x09
    18d8:	aa 87       	std	Y+10, r26	; 0x0a
    18da:	bb 87       	std	Y+11, r27	; 0x0b
	u8 Local_u8Array[10];
	u8 Local_i1, Local_i2;
	u8 Local_NumOfTens=0;
    18dc:	1d 82       	std	Y+5, r1	; 0x05
    18de:	13 c0       	rjmp	.+38     	; 0x1906 <CLCD_voidSendDecimalNumber+0x88>

	while (Local_f32Number-(u32)Local_f32Number)
	{
		Local_f32Number*=10;
    18e0:	68 85       	ldd	r22, Y+8	; 0x08
    18e2:	79 85       	ldd	r23, Y+9	; 0x09
    18e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e2       	ldi	r20, 0x20	; 32
    18ee:	51 e4       	ldi	r21, 0x41	; 65
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	88 87       	std	Y+8, r24	; 0x08
    18fa:	99 87       	std	Y+9, r25	; 0x09
    18fc:	aa 87       	std	Y+10, r26	; 0x0a
    18fe:	bb 87       	std	Y+11, r27	; 0x0b
		Local_NumOfTens++;
    1900:	8d 81       	ldd	r24, Y+5	; 0x05
    1902:	8f 5f       	subi	r24, 0xFF	; 255
    1904:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_f32Number = Copy_Number;
	u8 Local_u8Array[10];
	u8 Local_i1, Local_i2;
	u8 Local_NumOfTens=0;

	while (Local_f32Number-(u32)Local_f32Number)
    1906:	68 85       	ldd	r22, Y+8	; 0x08
    1908:	79 85       	ldd	r23, Y+9	; 0x09
    190a:	8a 85       	ldd	r24, Y+10	; 0x0a
    190c:	9b 85       	ldd	r25, Y+11	; 0x0b
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    191e:	9b 01       	movw	r18, r22
    1920:	ac 01       	movw	r20, r24
    1922:	68 85       	ldd	r22, Y+8	; 0x08
    1924:	79 85       	ldd	r23, Y+9	; 0x09
    1926:	8a 85       	ldd	r24, Y+10	; 0x0a
    1928:	9b 85       	ldd	r25, Y+11	; 0x0b
    192a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    1942:	88 23       	and	r24, r24
    1944:	69 f6       	brne	.-102    	; 0x18e0 <CLCD_voidSendDecimalNumber+0x62>
		Local_f32Number*=10;
		Local_NumOfTens++;
	}

	//casting
	u32 Local_u32Number = Local_f32Number;
    1946:	68 85       	ldd	r22, Y+8	; 0x08
    1948:	79 85       	ldd	r23, Y+9	; 0x09
    194a:	8a 85       	ldd	r24, Y+10	; 0x0a
    194c:	9b 85       	ldd	r25, Y+11	; 0x0b
    194e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	ab 83       	std	Y+3, r26	; 0x03
    195c:	bc 83       	std	Y+4, r27	; 0x04

	for (Local_i1=0; Local_u32Number!=0; Local_i1++)
    195e:	1f 82       	std	Y+7, r1	; 0x07
    1960:	2d c0       	rjmp	.+90     	; 0x19bc <CLCD_voidSendDecimalNumber+0x13e>
	{
		Local_u8Array[Local_i1] = Local_u32Number % 10;
    1962:	8f 81       	ldd	r24, Y+7	; 0x07
    1964:	08 2f       	mov	r16, r24
    1966:	10 e0       	ldi	r17, 0x00	; 0
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	ab 81       	ldd	r26, Y+3	; 0x03
    196e:	bc 81       	ldd	r27, Y+4	; 0x04
    1970:	2a e0       	ldi	r18, 0x0A	; 10
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 c3 14 	call	0x2986	; 0x2986 <__udivmodsi4>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	28 2f       	mov	r18, r24
    1986:	ce 01       	movw	r24, r28
    1988:	0c 96       	adiw	r24, 0x0c	; 12
    198a:	fc 01       	movw	r30, r24
    198c:	e0 0f       	add	r30, r16
    198e:	f1 1f       	adc	r31, r17
    1990:	20 83       	st	Z, r18
		Local_u32Number /=10;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	ab 81       	ldd	r26, Y+3	; 0x03
    1998:	bc 81       	ldd	r27, Y+4	; 0x04
    199a:	2a e0       	ldi	r18, 0x0A	; 10
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 c3 14 	call	0x2986	; 0x2986 <__udivmodsi4>
    19aa:	da 01       	movw	r26, r20
    19ac:	c9 01       	movw	r24, r18
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	ab 83       	std	Y+3, r26	; 0x03
    19b4:	bc 83       	std	Y+4, r27	; 0x04
	}

	//casting
	u32 Local_u32Number = Local_f32Number;

	for (Local_i1=0; Local_u32Number!=0; Local_i1++)
    19b6:	8f 81       	ldd	r24, Y+7	; 0x07
    19b8:	8f 5f       	subi	r24, 0xFF	; 255
    19ba:	8f 83       	std	Y+7, r24	; 0x07
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	ab 81       	ldd	r26, Y+3	; 0x03
    19c2:	bc 81       	ldd	r27, Y+4	; 0x04
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	a1 05       	cpc	r26, r1
    19c8:	b1 05       	cpc	r27, r1
    19ca:	59 f6       	brne	.-106    	; 0x1962 <CLCD_voidSendDecimalNumber+0xe4>
	{
		Local_u8Array[Local_i1] = Local_u32Number % 10;
		Local_u32Number /=10;
	}

	if (Local_i1 == Local_NumOfTens)
    19cc:	9f 81       	ldd	r25, Y+7	; 0x07
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	98 17       	cp	r25, r24
    19d2:	19 f4       	brne	.+6      	; 0x19da <CLCD_voidSendDecimalNumber+0x15c>
		CLCD_voidSendData('0');
    19d4:	80 e3       	ldi	r24, 0x30	; 48
    19d6:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>

	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    19da:	8f 81       	ldd	r24, Y+7	; 0x07
    19dc:	8e 83       	std	Y+6, r24	; 0x06
    19de:	19 c0       	rjmp	.+50     	; 0x1a12 <CLCD_voidSendDecimalNumber+0x194>
	{
		if (Local_i2 == Local_NumOfTens)
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	98 17       	cp	r25, r24
    19e6:	19 f4       	brne	.+6      	; 0x19ee <CLCD_voidSendDecimalNumber+0x170>
			CLCD_voidSendData('.');
    19e8:	8e e2       	ldi	r24, 0x2E	; 46
    19ea:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
    19ee:	8e 81       	ldd	r24, Y+6	; 0x06
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9c 01       	movw	r18, r24
    19f6:	21 50       	subi	r18, 0x01	; 1
    19f8:	30 40       	sbci	r19, 0x00	; 0
    19fa:	ce 01       	movw	r24, r28
    19fc:	0c 96       	adiw	r24, 0x0c	; 12
    19fe:	fc 01       	movw	r30, r24
    1a00:	e2 0f       	add	r30, r18
    1a02:	f3 1f       	adc	r31, r19
    1a04:	80 81       	ld	r24, Z
    1a06:	80 5d       	subi	r24, 0xD0	; 208
    1a08:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
	}

	if (Local_i1 == Local_NumOfTens)
		CLCD_voidSendData('0');

	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0e:	81 50       	subi	r24, 0x01	; 1
    1a10:	8e 83       	std	Y+6, r24	; 0x06
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	88 23       	and	r24, r24
    1a16:	21 f7       	brne	.-56     	; 0x19e0 <CLCD_voidSendDecimalNumber+0x162>
		if (Local_i2 == Local_NumOfTens)
			CLCD_voidSendData('.');
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
	}

	if (Local_NumOfTens == 0)
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	88 23       	and	r24, r24
    1a1c:	31 f4       	brne	.+12     	; 0x1a2a <CLCD_voidSendDecimalNumber+0x1ac>
	{
		CLCD_voidSendData('.');
    1a1e:	8e e2       	ldi	r24, 0x2E	; 46
    1a20:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
		CLCD_voidSendData('0');
    1a24:	80 e3       	ldi	r24, 0x30	; 48
    1a26:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
	}
}
    1a2a:	6a 96       	adiw	r28, 0x1a	; 26
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <CLCD_voidGoToRowColumn>:


void CLCD_voidGoToRowColumn(u8 Copy_u8xPosition, u8 Copy_u8yPosition)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <CLCD_voidGoToRowColumn+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <CLCD_voidGoToRowColumn+0x8>
    1a48:	0f 92       	push	r0
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
    1a50:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	switch(Copy_u8xPosition)
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	3d 83       	std	Y+5, r19	; 0x05
    1a5a:	2c 83       	std	Y+4, r18	; 0x04
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	91 05       	cpc	r25, r1
    1a64:	c1 f0       	breq	.+48     	; 0x1a96 <CLCD_voidGoToRowColumn+0x56>
    1a66:	2c 81       	ldd	r18, Y+4	; 0x04
    1a68:	3d 81       	ldd	r19, Y+5	; 0x05
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <CLCD_voidGoToRowColumn+0x3a>
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	61 f0       	breq	.+24     	; 0x1a90 <CLCD_voidGoToRowColumn+0x50>
    1a78:	19 c0       	rjmp	.+50     	; 0x1aac <CLCD_voidGoToRowColumn+0x6c>
    1a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	69 f0       	breq	.+26     	; 0x1a9e <CLCD_voidGoToRowColumn+0x5e>
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	83 30       	cpi	r24, 0x03	; 3
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	61 f0       	breq	.+24     	; 0x1aa6 <CLCD_voidGoToRowColumn+0x66>
    1a8e:	0e c0       	rjmp	.+28     	; 0x1aac <CLCD_voidGoToRowColumn+0x6c>
	{
		case 0:  Local_u8Adress = Copy_u8yPosition;  		break;
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	0b c0       	rjmp	.+22     	; 0x1aac <CLCD_voidGoToRowColumn+0x6c>
		case 1:  Local_u8Adress = Copy_u8yPosition + 0x40;  break;
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	80 5c       	subi	r24, 0xC0	; 192
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	07 c0       	rjmp	.+14     	; 0x1aac <CLCD_voidGoToRowColumn+0x6c>
		case 2:  Local_u8Adress = Copy_u8yPosition + 0x14;  break;
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	8c 5e       	subi	r24, 0xEC	; 236
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <CLCD_voidGoToRowColumn+0x6c>
		case 3:  Local_u8Adress = Copy_u8yPosition + 0x54;	break;
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	8c 5a       	subi	r24, 0xAC	; 172
    1aaa:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}

	/* setting the last bit ,As the command is (1 bit[7] , Address counter bits[6:0])*/
	SET_BIT(Local_u8Adress,7);
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	80 68       	ori	r24, 0x80	; 128
    1ab0:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCommand(Local_u8Adress);
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>
}
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <CLCD_voidSendSpecialCharacter>:



void CLCD_voidSendSpecialCharacter(const u8* Copy_u8Arr, u8 Copy_u8PatternNumber)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <CLCD_voidSendSpecialCharacter+0x6>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <CLCD_voidSendSpecialCharacter+0x8>
    1ad0:	0f 92       	push	r0
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
    1ada:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGRAMAddress = 0;
    1adc:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(Local_u8CGRAMAddress,6);
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	80 64       	ori	r24, 0x40	; 64
    1af6:	8a 83       	std	Y+2, r24	; 0x02

	/*moving to CGRAM to write the special character inside it*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress);
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>

	/* writing the special character*/
	for (u8 i = 0; i<8; i++)
    1afe:	19 82       	std	Y+1, r1	; 0x01
    1b00:	0e c0       	rjmp	.+28     	; 0x1b1e <CLCD_voidSendSpecialCharacter+0x56>
	{
		CLCD_voidSendData(Copy_u8Arr[i]);
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e2 0f       	add	r30, r18
    1b10:	f3 1f       	adc	r31, r19
    1b12:	80 81       	ld	r24, Z
    1b14:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>

	/*moving to CGRAM to write the special character inside it*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress);

	/* writing the special character*/
	for (u8 i = 0; i<8; i++)
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	88 30       	cpi	r24, 0x08	; 8
    1b22:	78 f3       	brcs	.-34     	; 0x1b02 <CLCD_voidSendSpecialCharacter+0x3a>
	{
		CLCD_voidSendData(Copy_u8Arr[i]);
	}

	/* switching again to DDRAM */
	CLCD_voidGoToRowColumn (0,0);  // 0,0 can be changed
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <CLCD_voidGoToRowColumn>
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <CLCD_voidDisplaySpecialCharacter>:

void CLCD_voidDisplaySpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <CLCD_voidDisplaySpecialCharacter+0x6>
    1b42:	0f 92       	push	r0
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	6a 83       	std	Y+2, r22	; 0x02
    1b4c:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToRowColumn (Copy_u8XPosition,Copy_u8YPosition);
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	6b 81       	ldd	r22, Y+3	; 0x03
    1b52:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <CLCD_voidGoToRowColumn>
	CLCD_voidSendData(Copy_u8PatternNumber);
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <DIO_voidInit>:
#include "DIO_interface.h"

/*****************************************************************************************/
#if DIO_CONFIG == 1
void DIO_voidInit()
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(DIO_u8PORTA, CONC(A7,A6,A5,A4,A3,A2,A1,A0));
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	6c ee       	ldi	r22, 0xEC	; 236
    1b74:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTB, CONC(B7,B6,B5,B4,B3,B2,B1,B0));
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	6f ef       	ldi	r22, 0xFF	; 255
    1b7c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTC, CONC(C7,C6,C5,C4,C3,C2,C1,C0));
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	6f ef       	ldi	r22, 0xFF	; 255
    1b84:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTD, CONC(D7,D6,D5,D4,D3,D2,D1,D0));
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	62 e1       	ldi	r22, 0x12	; 18
    1b8c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_u8SetPortDirection>
}
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <DIO_u8SetPortDirection>:
#endif

/*****************************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <DIO_u8SetPortDirection+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <DIO_u8SetPortDirection+0x8>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	8a 83       	std	Y+2, r24	; 0x02
    1ba6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1ba8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	3d 83       	std	Y+5, r19	; 0x05
    1bb2:	2c 83       	std	Y+4, r18	; 0x04
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	d1 f0       	breq	.+52     	; 0x1bf2 <DIO_u8SetPortDirection+0x5c>
    1bbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <DIO_u8SetPortDirection+0x3c>
    1bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bca:	9d 81       	ldd	r25, Y+5	; 0x05
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <DIO_u8SetPortDirection+0x52>
    1bd0:	1f c0       	rjmp	.+62     	; 0x1c10 <DIO_u8SetPortDirection+0x7a>
    1bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	81 f0       	breq	.+32     	; 0x1bfc <DIO_u8SetPortDirection+0x66>
    1bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bde:	9d 81       	ldd	r25, Y+5	; 0x05
    1be0:	83 30       	cpi	r24, 0x03	; 3
    1be2:	91 05       	cpc	r25, r1
    1be4:	81 f0       	breq	.+32     	; 0x1c06 <DIO_u8SetPortDirection+0x70>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <DIO_u8SetPortDirection+0x7a>
	{ 
		case DIO_u8PORTA:	DDRA_REG = Copy_u8Direction; 	break;
    1be8:	ea e3       	ldi	r30, 0x3A	; 58
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	80 83       	st	Z, r24
    1bf0:	11 c0       	rjmp	.+34     	; 0x1c14 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTB:	DDRB_REG = Copy_u8Direction; 	break;
    1bf2:	e7 e3       	ldi	r30, 0x37	; 55
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	80 83       	st	Z, r24
    1bfa:	0c c0       	rjmp	.+24     	; 0x1c14 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTC:	DDRC_REG = Copy_u8Direction; 	break;
    1bfc:	e4 e3       	ldi	r30, 0x34	; 52
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	80 83       	st	Z, r24
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTD:	DDRD_REG = Copy_u8Direction; 	break;
    1c06:	e1 e3       	ldi	r30, 0x31	; 49
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	80 83       	st	Z, r24
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <DIO_u8SetPortDirection+0x7e>
		default:			Local_u8ErrorState = 1; break;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <DIO_u8GetPinValue>:

/*****************************************************************************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8Value)

{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	27 97       	sbiw	r28, 0x07	; 7
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	8a 83       	std	Y+2, r24	; 0x02
    1c3c:	6b 83       	std	Y+3, r22	; 0x03
    1c3e:	5d 83       	std	Y+5, r21	; 0x05
    1c40:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1c42:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin <= 7) && (Copy_u8Value !=NULL))
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	88 30       	cpi	r24, 0x08	; 8
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <DIO_u8GetPinValue+0x26>
    1c4a:	79 c0       	rjmp	.+242    	; 0x1d3e <DIO_u8GetPinValue+0x118>
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <DIO_u8GetPinValue+0x30>
    1c54:	74 c0       	rjmp	.+232    	; 0x1d3e <DIO_u8GetPinValue+0x118>
	{  
		switch(Copy_u8Port)
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	3f 83       	std	Y+7, r19	; 0x07
    1c5e:	2e 83       	std	Y+6, r18	; 0x06
    1c60:	4e 81       	ldd	r20, Y+6	; 0x06
    1c62:	5f 81       	ldd	r21, Y+7	; 0x07
    1c64:	41 30       	cpi	r20, 0x01	; 1
    1c66:	51 05       	cpc	r21, r1
    1c68:	59 f1       	breq	.+86     	; 0x1cc0 <DIO_u8GetPinValue+0x9a>
    1c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	91 05       	cpc	r25, r1
    1c72:	34 f4       	brge	.+12     	; 0x1c80 <DIO_u8GetPinValue+0x5a>
    1c74:	2e 81       	ldd	r18, Y+6	; 0x06
    1c76:	3f 81       	ldd	r19, Y+7	; 0x07
    1c78:	21 15       	cp	r18, r1
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	69 f0       	breq	.+26     	; 0x1c98 <DIO_u8GetPinValue+0x72>
    1c7e:	5c c0       	rjmp	.+184    	; 0x1d38 <DIO_u8GetPinValue+0x112>
    1c80:	4e 81       	ldd	r20, Y+6	; 0x06
    1c82:	5f 81       	ldd	r21, Y+7	; 0x07
    1c84:	42 30       	cpi	r20, 0x02	; 2
    1c86:	51 05       	cpc	r21, r1
    1c88:	79 f1       	breq	.+94     	; 0x1ce8 <DIO_u8GetPinValue+0xc2>
    1c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8e:	83 30       	cpi	r24, 0x03	; 3
    1c90:	91 05       	cpc	r25, r1
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <DIO_u8GetPinValue+0x70>
    1c94:	3d c0       	rjmp	.+122    	; 0x1d10 <DIO_u8GetPinValue+0xea>
    1c96:	50 c0       	rjmp	.+160    	; 0x1d38 <DIO_u8GetPinValue+0x112>
		{    
		  case DIO_u8PORTA:	*Copy_u8Value = GET_BIT(PINA_REG, Copy_u8Pin);	break;
    1c98:	e9 e3       	ldi	r30, 0x39	; 57
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a9 01       	movw	r20, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <DIO_u8GetPinValue+0x8a>
    1cac:	55 95       	asr	r21
    1cae:	47 95       	ror	r20
    1cb0:	8a 95       	dec	r24
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <DIO_u8GetPinValue+0x86>
    1cb4:	ca 01       	movw	r24, r20
    1cb6:	81 70       	andi	r24, 0x01	; 1
    1cb8:	ec 81       	ldd	r30, Y+4	; 0x04
    1cba:	fd 81       	ldd	r31, Y+5	; 0x05
    1cbc:	80 83       	st	Z, r24
    1cbe:	41 c0       	rjmp	.+130    	; 0x1d42 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTB:	*Copy_u8Value = GET_BIT(PINB_REG, Copy_u8Pin);	break;
    1cc0:	e6 e3       	ldi	r30, 0x36	; 54
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a9 01       	movw	r20, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <DIO_u8GetPinValue+0xb2>
    1cd4:	55 95       	asr	r21
    1cd6:	47 95       	ror	r20
    1cd8:	8a 95       	dec	r24
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <DIO_u8GetPinValue+0xae>
    1cdc:	ca 01       	movw	r24, r20
    1cde:	81 70       	andi	r24, 0x01	; 1
    1ce0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ce2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ce4:	80 83       	st	Z, r24
    1ce6:	2d c0       	rjmp	.+90     	; 0x1d42 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTC:	*Copy_u8Value = GET_BIT(PINC_REG, Copy_u8Pin);	break;
    1ce8:	e3 e3       	ldi	r30, 0x33	; 51
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a9 01       	movw	r20, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_u8GetPinValue+0xda>
    1cfc:	55 95       	asr	r21
    1cfe:	47 95       	ror	r20
    1d00:	8a 95       	dec	r24
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <DIO_u8GetPinValue+0xd6>
    1d04:	ca 01       	movw	r24, r20
    1d06:	81 70       	andi	r24, 0x01	; 1
    1d08:	ec 81       	ldd	r30, Y+4	; 0x04
    1d0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d0c:	80 83       	st	Z, r24
    1d0e:	19 c0       	rjmp	.+50     	; 0x1d42 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTD:	*Copy_u8Value = GET_BIT(PIND_REG, Copy_u8Pin);	break;
    1d10:	e0 e3       	ldi	r30, 0x30	; 48
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a9 01       	movw	r20, r18
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <DIO_u8GetPinValue+0x102>
    1d24:	55 95       	asr	r21
    1d26:	47 95       	ror	r20
    1d28:	8a 95       	dec	r24
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <DIO_u8GetPinValue+0xfe>
    1d2c:	ca 01       	movw	r24, r20
    1d2e:	81 70       	andi	r24, 0x01	; 1
    1d30:	ec 81       	ldd	r30, Y+4	; 0x04
    1d32:	fd 81       	ldd	r31, Y+5	; 0x05
    1d34:	80 83       	st	Z, r24
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <DIO_u8GetPinValue+0x11c>
		  default:			Local_u8ErrorState = 1; break;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d44:	27 96       	adiw	r28, 0x07	; 7
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <DIO_u8SetPinValue>:


/*****************************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	28 97       	sbiw	r28, 0x08	; 8
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
    1d6c:	6b 83       	std	Y+3, r22	; 0x03
    1d6e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1d70:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= 7)
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	88 30       	cpi	r24, 0x08	; 8
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <DIO_u8SetPinValue+0x24>
    1d78:	f4 c0       	rjmp	.+488    	; 0x1f62 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <DIO_u8SetPinValue+0x2c>
    1d80:	72 c0       	rjmp	.+228    	; 0x1e66 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	38 87       	std	Y+8, r19	; 0x08
    1d8a:	2f 83       	std	Y+7, r18	; 0x07
    1d8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8e:	98 85       	ldd	r25, Y+8	; 0x08
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	91 05       	cpc	r25, r1
    1d94:	49 f1       	breq	.+82     	; 0x1de8 <DIO_u8SetPinValue+0x92>
    1d96:	2f 81       	ldd	r18, Y+7	; 0x07
    1d98:	38 85       	ldd	r19, Y+8	; 0x08
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <DIO_u8SetPinValue+0x54>
    1da0:	8f 81       	ldd	r24, Y+7	; 0x07
    1da2:	98 85       	ldd	r25, Y+8	; 0x08
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	61 f0       	breq	.+24     	; 0x1dc0 <DIO_u8SetPinValue+0x6a>
    1da8:	5b c0       	rjmp	.+182    	; 0x1e60 <DIO_u8SetPinValue+0x10a>
    1daa:	2f 81       	ldd	r18, Y+7	; 0x07
    1dac:	38 85       	ldd	r19, Y+8	; 0x08
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	71 f1       	breq	.+92     	; 0x1e10 <DIO_u8SetPinValue+0xba>
    1db4:	8f 81       	ldd	r24, Y+7	; 0x07
    1db6:	98 85       	ldd	r25, Y+8	; 0x08
    1db8:	83 30       	cpi	r24, 0x03	; 3
    1dba:	91 05       	cpc	r25, r1
    1dbc:	e9 f1       	breq	.+122    	; 0x1e38 <DIO_u8SetPinValue+0xe2>
    1dbe:	50 c0       	rjmp	.+160    	; 0x1e60 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:  SET_BIT(PORTA_REG,Copy_u8Pin);	break;
    1dc0:	ab e3       	ldi	r26, 0x3B	; 59
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	eb e3       	ldi	r30, 0x3B	; 59
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 2e       	mov	r0, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <DIO_u8SetPinValue+0x88>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	0a 94       	dec	r0
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <DIO_u8SetPinValue+0x84>
    1de2:	84 2b       	or	r24, r20
    1de4:	8c 93       	st	X, r24
    1de6:	bf c0       	rjmp	.+382    	; 0x1f66 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB:  SET_BIT(PORTB_REG,Copy_u8Pin);	break;
    1de8:	a8 e3       	ldi	r26, 0x38	; 56
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e8 e3       	ldi	r30, 0x38	; 56
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	48 2f       	mov	r20, r24
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	02 2e       	mov	r0, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <DIO_u8SetPinValue+0xb0>
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	0a 94       	dec	r0
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <DIO_u8SetPinValue+0xac>
    1e0a:	84 2b       	or	r24, r20
    1e0c:	8c 93       	st	X, r24
    1e0e:	ab c0       	rjmp	.+342    	; 0x1f66 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC:  SET_BIT(PORTC_REG,Copy_u8Pin);	break;
    1e10:	a5 e3       	ldi	r26, 0x35	; 53
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e5 e3       	ldi	r30, 0x35	; 53
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	02 2e       	mov	r0, r18
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <DIO_u8SetPinValue+0xd8>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	0a 94       	dec	r0
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <DIO_u8SetPinValue+0xd4>
    1e32:	84 2b       	or	r24, r20
    1e34:	8c 93       	st	X, r24
    1e36:	97 c0       	rjmp	.+302    	; 0x1f66 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD:  SET_BIT(PORTD_REG,Copy_u8Pin);	break;
    1e38:	a2 e3       	ldi	r26, 0x32	; 50
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e2 e3       	ldi	r30, 0x32	; 50
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	48 2f       	mov	r20, r24
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 2e       	mov	r0, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <DIO_u8SetPinValue+0x100>
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	0a 94       	dec	r0
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <DIO_u8SetPinValue+0xfc>
    1e5a:	84 2b       	or	r24, r20
    1e5c:	8c 93       	st	X, r24
    1e5e:	83 c0       	rjmp	.+262    	; 0x1f66 <DIO_u8SetPinValue+0x210>
				default:		   Local_u8ErrorState = 1; break;	
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	80 c0       	rjmp	.+256    	; 0x1f66 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value == DIO_u8PIN_LOW)
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	88 23       	and	r24, r24
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <DIO_u8SetPinValue+0x118>
    1e6c:	77 c0       	rjmp	.+238    	; 0x1f5c <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	3e 83       	std	Y+6, r19	; 0x06
    1e76:	2d 83       	std	Y+5, r18	; 0x05
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	59 f1       	breq	.+86     	; 0x1ed8 <DIO_u8SetPinValue+0x182>
    1e82:	2d 81       	ldd	r18, Y+5	; 0x05
    1e84:	3e 81       	ldd	r19, Y+6	; 0x06
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	31 05       	cpc	r19, r1
    1e8a:	2c f4       	brge	.+10     	; 0x1e96 <DIO_u8SetPinValue+0x140>
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	69 f0       	breq	.+26     	; 0x1eae <DIO_u8SetPinValue+0x158>
    1e94:	60 c0       	rjmp	.+192    	; 0x1f56 <DIO_u8SetPinValue+0x200>
    1e96:	2d 81       	ldd	r18, Y+5	; 0x05
    1e98:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	89 f1       	breq	.+98     	; 0x1f02 <DIO_u8SetPinValue+0x1ac>
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	83 30       	cpi	r24, 0x03	; 3
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <DIO_u8SetPinValue+0x156>
    1eaa:	40 c0       	rjmp	.+128    	; 0x1f2c <DIO_u8SetPinValue+0x1d6>
    1eac:	54 c0       	rjmp	.+168    	; 0x1f56 <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA:	CLR_BIT(PORTA_REG,Copy_u8Pin);  break;
    1eae:	ab e3       	ldi	r26, 0x3B	; 59
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	eb e3       	ldi	r30, 0x3B	; 59
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 2e       	mov	r0, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <DIO_u8SetPinValue+0x176>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <DIO_u8SetPinValue+0x172>
    1ed0:	80 95       	com	r24
    1ed2:	84 23       	and	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	47 c0       	rjmp	.+142    	; 0x1f66 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB:	CLR_BIT(PORTB_REG,Copy_u8Pin);  break;
    1ed8:	a8 e3       	ldi	r26, 0x38	; 56
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e8 e3       	ldi	r30, 0x38	; 56
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <DIO_u8SetPinValue+0x1a0>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <DIO_u8SetPinValue+0x19c>
    1efa:	80 95       	com	r24
    1efc:	84 23       	and	r24, r20
    1efe:	8c 93       	st	X, r24
    1f00:	32 c0       	rjmp	.+100    	; 0x1f66 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC:	CLR_BIT(PORTC_REG,Copy_u8Pin);  break;
    1f02:	a5 e3       	ldi	r26, 0x35	; 53
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e5 e3       	ldi	r30, 0x35	; 53
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 2e       	mov	r0, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <DIO_u8SetPinValue+0x1ca>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <DIO_u8SetPinValue+0x1c6>
    1f24:	80 95       	com	r24
    1f26:	84 23       	and	r24, r20
    1f28:	8c 93       	st	X, r24
    1f2a:	1d c0       	rjmp	.+58     	; 0x1f66 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD:	CLR_BIT(PORTD_REG,Copy_u8Pin);  break;
    1f2c:	a2 e3       	ldi	r26, 0x32	; 50
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e2 e3       	ldi	r30, 0x32	; 50
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	48 2f       	mov	r20, r24
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	02 2e       	mov	r0, r18
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <DIO_u8SetPinValue+0x1f4>
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	0a 94       	dec	r0
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <DIO_u8SetPinValue+0x1f0>
    1f4e:	80 95       	com	r24
    1f50:	84 23       	and	r24, r20
    1f52:	8c 93       	st	X, r24
    1f54:	08 c0       	rjmp	.+16     	; 0x1f66 <DIO_u8SetPinValue+0x210>
				default : 			Local_u8ErrorState = 1; break;	
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	05 c0       	rjmp	.+10     	; 0x1f66 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <DIO_u8SetPinValue+0x210>
		}
		
	}
	else
	{
		Local_u8ErrorState = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f68:	28 96       	adiw	r28, 0x08	; 8
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <DIO_u8SetPortValue>:

/*****************************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <DIO_u8SetPortValue+0x6>
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <DIO_u8SetPortValue+0x8>
    1f82:	0f 92       	push	r0
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	8a 83       	std	Y+2, r24	; 0x02
    1f8a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1f8c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	3d 83       	std	Y+5, r19	; 0x05
    1f96:	2c 83       	std	Y+4, r18	; 0x04
    1f98:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	d1 f0       	breq	.+52     	; 0x1fd6 <DIO_u8SetPortValue+0x5c>
    1fa2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa6:	22 30       	cpi	r18, 0x02	; 2
    1fa8:	31 05       	cpc	r19, r1
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <DIO_u8SetPortValue+0x3c>
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	61 f0       	breq	.+24     	; 0x1fcc <DIO_u8SetPortValue+0x52>
    1fb4:	1f c0       	rjmp	.+62     	; 0x1ff4 <DIO_u8SetPortValue+0x7a>
    1fb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fba:	22 30       	cpi	r18, 0x02	; 2
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	81 f0       	breq	.+32     	; 0x1fe0 <DIO_u8SetPortValue+0x66>
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	81 f0       	breq	.+32     	; 0x1fea <DIO_u8SetPortValue+0x70>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA:  PORTA_REG = Copy_u8Value;	break;
    1fcc:	eb e3       	ldi	r30, 0x3B	; 59
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	80 83       	st	Z, r24
    1fd4:	11 c0       	rjmp	.+34     	; 0x1ff8 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB:  PORTB_REG = Copy_u8Value;	break;
    1fd6:	e8 e3       	ldi	r30, 0x38	; 56
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	80 83       	st	Z, r24
    1fde:	0c c0       	rjmp	.+24     	; 0x1ff8 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC:  PORTC_REG = Copy_u8Value;	break;
    1fe0:	e5 e3       	ldi	r30, 0x35	; 53
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	80 83       	st	Z, r24
    1fe8:	07 c0       	rjmp	.+14     	; 0x1ff8 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD:  PORTD_REG = Copy_u8Value;	break;
    1fea:	e2 e3       	ldi	r30, 0x32	; 50
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	80 83       	st	Z, r24
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <DIO_u8SetPortValue+0x7e>
		default:		   Local_u8ErrorState = 1; break;	
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <DIO_u8TogglePin>:

/*****************************************************************************************/


u8 DIO_u8TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin )
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <DIO_u8TogglePin+0x6>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <DIO_u8TogglePin+0x8>
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	8a 83       	std	Y+2, r24	; 0x02
    201a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    201c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= 7)
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	88 30       	cpi	r24, 0x08	; 8
    2022:	08 f0       	brcs	.+2      	; 0x2026 <DIO_u8TogglePin+0x1c>
    2024:	72 c0       	rjmp	.+228    	; 0x210a <DIO_u8TogglePin+0x100>
	{
		switch (Copy_u8Port)
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	3d 83       	std	Y+5, r19	; 0x05
    202e:	2c 83       	std	Y+4, r18	; 0x04
    2030:	8c 81       	ldd	r24, Y+4	; 0x04
    2032:	9d 81       	ldd	r25, Y+5	; 0x05
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	91 05       	cpc	r25, r1
    2038:	49 f1       	breq	.+82     	; 0x208c <DIO_u8TogglePin+0x82>
    203a:	2c 81       	ldd	r18, Y+4	; 0x04
    203c:	3d 81       	ldd	r19, Y+5	; 0x05
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	31 05       	cpc	r19, r1
    2042:	2c f4       	brge	.+10     	; 0x204e <DIO_u8TogglePin+0x44>
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	9d 81       	ldd	r25, Y+5	; 0x05
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	61 f0       	breq	.+24     	; 0x2064 <DIO_u8TogglePin+0x5a>
    204c:	5b c0       	rjmp	.+182    	; 0x2104 <DIO_u8TogglePin+0xfa>
    204e:	2c 81       	ldd	r18, Y+4	; 0x04
    2050:	3d 81       	ldd	r19, Y+5	; 0x05
    2052:	22 30       	cpi	r18, 0x02	; 2
    2054:	31 05       	cpc	r19, r1
    2056:	71 f1       	breq	.+92     	; 0x20b4 <DIO_u8TogglePin+0xaa>
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	9d 81       	ldd	r25, Y+5	; 0x05
    205c:	83 30       	cpi	r24, 0x03	; 3
    205e:	91 05       	cpc	r25, r1
    2060:	e9 f1       	breq	.+122    	; 0x20dc <DIO_u8TogglePin+0xd2>
    2062:	50 c0       	rjmp	.+160    	; 0x2104 <DIO_u8TogglePin+0xfa>
		{
			case DIO_u8PORTA: TOGGLE_BIT(PORTA_REG,Copy_u8Pin);  break;
    2064:	ab e3       	ldi	r26, 0x3B	; 59
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	eb e3       	ldi	r30, 0x3B	; 59
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	48 2f       	mov	r20, r24
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	02 2e       	mov	r0, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <DIO_u8TogglePin+0x78>
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	0a 94       	dec	r0
    2084:	e2 f7       	brpl	.-8      	; 0x207e <DIO_u8TogglePin+0x74>
    2086:	84 27       	eor	r24, r20
    2088:	8c 93       	st	X, r24
    208a:	41 c0       	rjmp	.+130    	; 0x210e <DIO_u8TogglePin+0x104>
			case DIO_u8PORTB: TOGGLE_BIT(PORTB_REG,Copy_u8Pin);  break;
    208c:	a8 e3       	ldi	r26, 0x38	; 56
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e8 e3       	ldi	r30, 0x38	; 56
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	48 2f       	mov	r20, r24
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	02 2e       	mov	r0, r18
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <DIO_u8TogglePin+0xa0>
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	0a 94       	dec	r0
    20ac:	e2 f7       	brpl	.-8      	; 0x20a6 <DIO_u8TogglePin+0x9c>
    20ae:	84 27       	eor	r24, r20
    20b0:	8c 93       	st	X, r24
    20b2:	2d c0       	rjmp	.+90     	; 0x210e <DIO_u8TogglePin+0x104>
			case DIO_u8PORTC: TOGGLE_BIT(PORTC_REG,Copy_u8Pin);  break;
    20b4:	a5 e3       	ldi	r26, 0x35	; 53
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e5 e3       	ldi	r30, 0x35	; 53
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	48 2f       	mov	r20, r24
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	02 2e       	mov	r0, r18
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <DIO_u8TogglePin+0xc8>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	0a 94       	dec	r0
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <DIO_u8TogglePin+0xc4>
    20d6:	84 27       	eor	r24, r20
    20d8:	8c 93       	st	X, r24
    20da:	19 c0       	rjmp	.+50     	; 0x210e <DIO_u8TogglePin+0x104>
			case DIO_u8PORTD: TOGGLE_BIT(PORTD_REG,Copy_u8Pin);  break;
    20dc:	a2 e3       	ldi	r26, 0x32	; 50
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e2 e3       	ldi	r30, 0x32	; 50
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <DIO_u8TogglePin+0xf0>
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <DIO_u8TogglePin+0xec>
    20fe:	84 27       	eor	r24, r20
    2100:	8c 93       	st	X, r24
    2102:	05 c0       	rjmp	.+10     	; 0x210e <DIO_u8TogglePin+0x104>
			default: 	      Local_u8ErrorState = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	02 c0       	rjmp	.+4      	; 0x210e <DIO_u8TogglePin+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <TIMER0_voidInit>:

void (*Timer0_CTC_Ptr)(void) = NULL;


void TIMER0_voidInit()
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
	//select mode
#if MODE == NORMAL
	CLR_BIT(TCCR0,WGM01);
    2128:	a3 e5       	ldi	r26, 0x53	; 83
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e3 e5       	ldi	r30, 0x53	; 83
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	87 7f       	andi	r24, 0xF7	; 247
    2134:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM00);
    2136:	a3 e5       	ldi	r26, 0x53	; 83
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e3 e5       	ldi	r30, 0x53	; 83
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	8f 7b       	andi	r24, 0xBF	; 191
    2142:	8c 93       	st	X, r24
#elif MODE == PWM_PHASE_CORRECT
	SET_BIT(TCCR0,WGM01);
	SET_BIT(TCCR0,WGM00);
#endif

}
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <TIMER0_voidStart>:

void TIMER0_voidStart()
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
//clock select
	TCCR0 &= 0b11111000;
    2152:	a3 e5       	ldi	r26, 0x53	; 83
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e3 e5       	ldi	r30, 0x53	; 83
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	88 7f       	andi	r24, 0xF8	; 248
    215e:	8c 93       	st	X, r24
	TCCR0 |= PRESCALER;
    2160:	a3 e5       	ldi	r26, 0x53	; 83
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e3 e5       	ldi	r30, 0x53	; 83
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	81 60       	ori	r24, 0x01	; 1
    216c:	8c 93       	st	X, r24
}
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <TIMER0_voidStop>:

void TIMER0_voidStop()
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	//clock select
	TCCR0 &= 0b11111000;
    217c:	a3 e5       	ldi	r26, 0x53	; 83
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e3 e5       	ldi	r30, 0x53	; 83
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	88 7f       	andi	r24, 0xF8	; 248
    2188:	8c 93       	st	X, r24
	TCCR0 |= NO_CLOCK;
    218a:	a3 e5       	ldi	r26, 0x53	; 83
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e3 e5       	ldi	r30, 0x53	; 83
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	8c 93       	st	X, r24
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <TIMER0_voidSetTCNT>:

void TIMER0_voidSetTCNT(u8 Copy_u8Data)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Data;
    21a8:	e2 e5       	ldi	r30, 0x52	; 82
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	80 83       	st	Z, r24
}
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <TIMER0_voidGetTCNT>:

u8 TIMER0_voidGetTCNT()
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	0f 92       	push	r0
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
	u8 counts = TCNT0;
    21c2:	e2 e5       	ldi	r30, 0x52	; 82
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	89 83       	std	Y+1, r24	; 0x01
	return counts;
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <TIMER0_voidSetOCR>:

void TIMER0_voidSetOCR(u8 Copy_u8Data)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	0f 92       	push	r0
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Data;
    21e0:	ec e5       	ldi	r30, 0x5C	; 92
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	80 83       	st	Z, r24
}
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <TIMER0_voidEnableOverflowInterrupt>:


void TIMER0_voidEnableOverflowInterrupt()
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK0,TOIE0);
    21f8:	a9 e5       	ldi	r26, 0x59	; 89
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e9 e5       	ldi	r30, 0x59	; 89
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	81 60       	ori	r24, 0x01	; 1
    2204:	8c 93       	st	X, r24
}
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <TIMER0_voidDisableOverflowInterrupt>:

void TIMER0_voidDisableOverflowInterrupt()
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK0,TOIE0);
    2214:	a9 e5       	ldi	r26, 0x59	; 89
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e9 e5       	ldi	r30, 0x59	; 89
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8e 7f       	andi	r24, 0xFE	; 254
    2220:	8c 93       	st	X, r24
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <TIMER0_voidEnableCTCInterrupt>:

void TIMER0_voidEnableCTCInterrupt()
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK0,OCIE0);
    2230:	a9 e5       	ldi	r26, 0x59	; 89
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e9 e5       	ldi	r30, 0x59	; 89
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	82 60       	ori	r24, 0x02	; 2
    223c:	8c 93       	st	X, r24
}
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <TIMER0_voidDisaableCTCInterrupt>:

void TIMER0_voidDisaableCTCInterrupt()
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK0,OCIE0);
    224c:	a9 e5       	ldi	r26, 0x59	; 89
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e9 e5       	ldi	r30, 0x59	; 89
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	8d 7f       	andi	r24, 0xFD	; 253
    2258:	8c 93       	st	X, r24
}
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <TIMER0_OV_CallBack>:



void TIMER0_OV_CallBack(void(*Ptr)(void))
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	00 d0       	rcall	.+0      	; 0x2266 <TIMER0_OV_CallBack+0x6>
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OV_Ptr = Ptr;
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	90 93 af 01 	sts	0x01AF, r25
    2276:	80 93 ae 01 	sts	0x01AE, r24
}
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <TIMER_CTC_CallBack>:
void TIMER_CTC_CallBack(void(*Ptr)(void))
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <TIMER_CTC_CallBack+0x6>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CTC_Ptr = Ptr;
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	90 93 b1 01 	sts	0x01B1, r25
    229a:	80 93 b0 01 	sts	0x01B0, r24
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <__vector_11>:

void __vector_11(void) __attribute__((signal,used,externally_visible));  //to avoid optimization
void __vector_11(void)
{
    22a8:	1f 92       	push	r1
    22aa:	0f 92       	push	r0
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	0f 92       	push	r0
    22b0:	11 24       	eor	r1, r1
    22b2:	2f 93       	push	r18
    22b4:	3f 93       	push	r19
    22b6:	4f 93       	push	r20
    22b8:	5f 93       	push	r21
    22ba:	6f 93       	push	r22
    22bc:	7f 93       	push	r23
    22be:	8f 93       	push	r24
    22c0:	9f 93       	push	r25
    22c2:	af 93       	push	r26
    22c4:	bf 93       	push	r27
    22c6:	ef 93       	push	r30
    22c8:	ff 93       	push	r31
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OV_Ptr!= NULL)
    22d2:	80 91 ae 01 	lds	r24, 0x01AE
    22d6:	90 91 af 01 	lds	r25, 0x01AF
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	29 f0       	breq	.+10     	; 0x22e8 <__vector_11+0x40>
		Timer0_OV_Ptr();
    22de:	e0 91 ae 01 	lds	r30, 0x01AE
    22e2:	f0 91 af 01 	lds	r31, 0x01AF
    22e6:	09 95       	icall
}
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	ff 91       	pop	r31
    22ee:	ef 91       	pop	r30
    22f0:	bf 91       	pop	r27
    22f2:	af 91       	pop	r26
    22f4:	9f 91       	pop	r25
    22f6:	8f 91       	pop	r24
    22f8:	7f 91       	pop	r23
    22fa:	6f 91       	pop	r22
    22fc:	5f 91       	pop	r21
    22fe:	4f 91       	pop	r20
    2300:	3f 91       	pop	r19
    2302:	2f 91       	pop	r18
    2304:	0f 90       	pop	r0
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	0f 90       	pop	r0
    230a:	1f 90       	pop	r1
    230c:	18 95       	reti

0000230e <__vector_10>:

void __vector_10(void) __attribute__((signal,used,externally_visible));  //to avoid optimization
void __vector_10(void)
{
    230e:	1f 92       	push	r1
    2310:	0f 92       	push	r0
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	0f 92       	push	r0
    2316:	11 24       	eor	r1, r1
    2318:	2f 93       	push	r18
    231a:	3f 93       	push	r19
    231c:	4f 93       	push	r20
    231e:	5f 93       	push	r21
    2320:	6f 93       	push	r22
    2322:	7f 93       	push	r23
    2324:	8f 93       	push	r24
    2326:	9f 93       	push	r25
    2328:	af 93       	push	r26
    232a:	bf 93       	push	r27
    232c:	ef 93       	push	r30
    232e:	ff 93       	push	r31
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CTC_Ptr!= NULL)
    2338:	80 91 b0 01 	lds	r24, 0x01B0
    233c:	90 91 b1 01 	lds	r25, 0x01B1
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	29 f0       	breq	.+10     	; 0x234e <__vector_10+0x40>
		Timer0_CTC_Ptr();
    2344:	e0 91 b0 01 	lds	r30, 0x01B0
    2348:	f0 91 b1 01 	lds	r31, 0x01B1
    234c:	09 95       	icall
}
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	ff 91       	pop	r31
    2354:	ef 91       	pop	r30
    2356:	bf 91       	pop	r27
    2358:	af 91       	pop	r26
    235a:	9f 91       	pop	r25
    235c:	8f 91       	pop	r24
    235e:	7f 91       	pop	r23
    2360:	6f 91       	pop	r22
    2362:	5f 91       	pop	r21
    2364:	4f 91       	pop	r20
    2366:	3f 91       	pop	r19
    2368:	2f 91       	pop	r18
    236a:	0f 90       	pop	r0
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	0f 90       	pop	r0
    2370:	1f 90       	pop	r1
    2372:	18 95       	reti

00002374 <USART_voidInit>:
#include "USART_config.h"
#include "USART_interface.h"


void USART_voidInit()
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
	//double speed
	SET_BIT(UCSRA,U2X);
    237c:	ab e2       	ldi	r26, 0x2B	; 43
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	eb e2       	ldi	r30, 0x2B	; 43
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	82 60       	ori	r24, 0x02	; 2
    2388:	8c 93       	st	X, r24

	// select to Write on UCSRC not UBRRH
	SET_BIT(UCSRC,URSEL);
    238a:	a0 e4       	ldi	r26, 0x40	; 64
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e0 e4       	ldi	r30, 0x40	; 64
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	80 68       	ori	r24, 0x80	; 128
    2396:	8c 93       	st	X, r24

	// mode synchronous
	CLR_BIT(UCSRC,UMSEL);
    2398:	a0 e4       	ldi	r26, 0x40	; 64
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e0 e4       	ldi	r30, 0x40	; 64
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8f 7b       	andi	r24, 0xBF	; 191
    23a4:	8c 93       	st	X, r24


	//PARITY DISABLED
	CLR_BIT(UCSRC,UPM1);
    23a6:	a0 e4       	ldi	r26, 0x40	; 64
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e0 e4       	ldi	r30, 0x40	; 64
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	8f 7d       	andi	r24, 0xDF	; 223
    23b2:	8c 93       	st	X, r24
	CLR_BIT(UCSRC,UPM0);
    23b4:	a0 e4       	ldi	r26, 0x40	; 64
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e0 e4       	ldi	r30, 0x40	; 64
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	8f 7e       	andi	r24, 0xEF	; 239
    23c0:	8c 93       	st	X, r24

	// STOP BIT : 1 BITS
	CLR_BIT(UCSRC,USBS);
    23c2:	a0 e4       	ldi	r26, 0x40	; 64
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e0 e4       	ldi	r30, 0x40	; 64
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	87 7f       	andi	r24, 0xF7	; 247
    23ce:	8c 93       	st	X, r24

	//SIZE
	CLR_BIT(UCSRB,UCSZ2);
    23d0:	aa e2       	ldi	r26, 0x2A	; 42
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	ea e2       	ldi	r30, 0x2A	; 42
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	8b 7f       	andi	r24, 0xFB	; 251
    23dc:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
    23de:	a0 e4       	ldi	r26, 0x40	; 64
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e0 e4       	ldi	r30, 0x40	; 64
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	84 60       	ori	r24, 0x04	; 4
    23ea:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ0);
    23ec:	a0 e4       	ldi	r26, 0x40	; 64
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e0 e4       	ldi	r30, 0x40	; 64
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	82 60       	ori	r24, 0x02	; 2
    23f8:	8c 93       	st	X, r24

	//BAUD RATE
	//UBRRL = 207;  //16M
		//UBRRL = 103;  //8M
	//UBRRH = 0;
	UBRRL = BAUD_RATE_ASYNC_DOUBLE(BAUD_RATE);
    23fa:	e9 e2       	ldi	r30, 0x29	; 41
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	87 e6       	ldi	r24, 0x67	; 103
    2400:	80 83       	st	Z, r24


	SET_BIT(UCSRB,RXEN);
    2402:	aa e2       	ldi	r26, 0x2A	; 42
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	ea e2       	ldi	r30, 0x2A	; 42
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	80 61       	ori	r24, 0x10	; 16
    240e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    2410:	aa e2       	ldi	r26, 0x2A	; 42
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	ea e2       	ldi	r30, 0x2A	; 42
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	88 60       	ori	r24, 0x08	; 8
    241c:	8c 93       	st	X, r24
}
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <USART_voidTransmit>:

void USART_voidTransmit(u8 Copy_u8DataTransmitted)
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	0f 92       	push	r0
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	89 83       	std	Y+1, r24	; 0x01

	while(!GET_BIT(UCSRA,UDRE))
    2430:	eb e2       	ldi	r30, 0x2B	; 43
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	82 95       	swap	r24
    2438:	86 95       	lsr	r24
    243a:	87 70       	andi	r24, 0x07	; 7
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	81 70       	andi	r24, 0x01	; 1
    2442:	90 70       	andi	r25, 0x00	; 0
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	a1 f3       	breq	.-24     	; 0x2430 <USART_voidTransmit+0xc>
	{
	 //POLLING
	}
	UDR = Copy_u8DataTransmitted;
    2448:	ec e2       	ldi	r30, 0x2C	; 44
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	80 83       	st	Z, r24


}
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <USART_u8Receive>:

u8 USART_u8Receive()
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	0f 92       	push	r0
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62

	u8 Copy_u8DataReceived;
	while(!GET_BIT(UCSRA,RXC));
    2462:	eb e2       	ldi	r30, 0x2B	; 43
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	88 23       	and	r24, r24
    246a:	dc f7       	brge	.-10     	; 0x2462 <USART_u8Receive+0xa>
	{
	 //POLLING
	}


	Copy_u8DataReceived = UDR;
    246c:	ec e2       	ldi	r30, 0x2C	; 44
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	89 83       	std	Y+1, r24	; 0x01

	//CLEAR FLAG
	//SET_BIT(UCSRA,RXC);

	return Copy_u8DataReceived;
    2474:	89 81       	ldd	r24, Y+1	; 0x01
}
    2476:	0f 90       	pop	r0
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <main>:

 void decimalToAsciiHexString(u8 decimalValue, char *hexString);


int main(void)
{
    247e:	ef 92       	push	r14
    2480:	ff 92       	push	r15
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	2c 97       	sbiw	r28, 0x0c	; 12
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    249a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_voidInit>
	USART_voidInit();
    249e:	0e 94 ba 11 	call	0x2374	; 0x2374 <USART_voidInit>
	CLCD_voidInit();
    24a2:	0e 94 9b 06 	call	0xd36	; 0xd36 <CLCD_voidInit>
	TIMER0_voidInit();
    24a6:	0e 94 90 10 	call	0x2120	; 0x2120 <TIMER0_voidInit>
	TIMER0_voidStart();
    24aa:	0e 94 a5 10 	call	0x214a	; 0x214a <TIMER0_voidStart>


	while(1)
	{

		service[0] = USART_u8Receive();
    24ae:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_u8Receive>
    24b2:	80 93 d9 01 	sts	0x01D9, r24
		service[1] = USART_u8Receive();
    24b6:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_u8Receive>
    24ba:	80 93 da 01 	sts	0x01DA, r24

		sub_service[0] = USART_u8Receive();
    24be:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_u8Receive>
    24c2:	80 93 b3 01 	sts	0x01B3, r24
		sub_service[1] = USART_u8Receive();
    24c6:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_u8Receive>
    24ca:	80 93 b4 01 	sts	0x01B4, r24

		if (service[0] == '2' && service[1] == '7' && sub_service[0] == '0'&& sub_service[1] == '1' && state == no_access)
    24ce:	80 91 d9 01 	lds	r24, 0x01D9
    24d2:	82 33       	cpi	r24, 0x32	; 50
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <main+0x5a>
    24d6:	6c c0       	rjmp	.+216    	; 0x25b0 <main+0x132>
    24d8:	80 91 da 01 	lds	r24, 0x01DA
    24dc:	87 33       	cpi	r24, 0x37	; 55
    24de:	09 f0       	breq	.+2      	; 0x24e2 <main+0x64>
    24e0:	67 c0       	rjmp	.+206    	; 0x25b0 <main+0x132>
    24e2:	80 91 b3 01 	lds	r24, 0x01B3
    24e6:	80 33       	cpi	r24, 0x30	; 48
    24e8:	09 f0       	breq	.+2      	; 0x24ec <main+0x6e>
    24ea:	62 c0       	rjmp	.+196    	; 0x25b0 <main+0x132>
    24ec:	80 91 b4 01 	lds	r24, 0x01B4
    24f0:	81 33       	cpi	r24, 0x31	; 49
    24f2:	09 f0       	breq	.+2      	; 0x24f6 <main+0x78>
    24f4:	5d c0       	rjmp	.+186    	; 0x25b0 <main+0x132>
    24f6:	80 91 b2 01 	lds	r24, 0x01B2
    24fa:	88 23       	and	r24, r24
    24fc:	09 f0       	breq	.+2      	; 0x2500 <main+0x82>
    24fe:	58 c0       	rjmp	.+176    	; 0x25b0 <main+0x132>
		{
			CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>
			CLCD_voidGoToRowColumn(0,0);
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <CLCD_voidGoToRowColumn>
			CLCD_voidSendString("67 01");
    250e:	80 e6       	ldi	r24, 0x60	; 96
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 bb 0b 	call	0x1776	; 0x1776 <CLCD_voidSendString>


			for (int i =0;i<4;i++)
    2516:	1c 86       	std	Y+12, r1	; 0x0c
    2518:	1b 86       	std	Y+11, r1	; 0x0b
    251a:	40 c0       	rjmp	.+128    	; 0x259c <main+0x11e>
			{
				random_decimal[i] = TIMER0_voidGetTCNT();  //from timer
    251c:	0b 85       	ldd	r16, Y+11	; 0x0b
    251e:	1c 85       	ldd	r17, Y+12	; 0x0c
    2520:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <TIMER0_voidGetTCNT>
    2524:	f8 01       	movw	r30, r16
    2526:	ef 53       	subi	r30, 0x3F	; 63
    2528:	fe 4f       	sbci	r31, 0xFE	; 254
    252a:	80 83       	st	Z, r24
				encrypted_by_ECU[i] =  random_decimal[i] + 1;
    252c:	2b 85       	ldd	r18, Y+11	; 0x0b
    252e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2530:	8b 85       	ldd	r24, Y+11	; 0x0b
    2532:	9c 85       	ldd	r25, Y+12	; 0x0c
    2534:	fc 01       	movw	r30, r24
    2536:	ef 53       	subi	r30, 0x3F	; 63
    2538:	fe 4f       	sbci	r31, 0xFE	; 254
    253a:	80 81       	ld	r24, Z
    253c:	8f 5f       	subi	r24, 0xFF	; 255
    253e:	f9 01       	movw	r30, r18
    2540:	eb 53       	subi	r30, 0x3B	; 59
    2542:	fe 4f       	sbci	r31, 0xFE	; 254
    2544:	80 83       	st	Z, r24
				decimalToAsciiHexString(random_decimal[i],random_hexa[i]);
    2546:	8b 85       	ldd	r24, Y+11	; 0x0b
    2548:	9c 85       	ldd	r25, Y+12	; 0x0c
    254a:	fc 01       	movw	r30, r24
    254c:	ef 53       	subi	r30, 0x3F	; 63
    254e:	fe 4f       	sbci	r31, 0xFE	; 254
    2550:	60 81       	ld	r22, Z
    2552:	45 eb       	ldi	r20, 0xB5	; 181
    2554:	51 e0       	ldi	r21, 0x01	; 1
    2556:	2b 85       	ldd	r18, Y+11	; 0x0b
    2558:	3c 85       	ldd	r19, Y+12	; 0x0c
    255a:	c9 01       	movw	r24, r18
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	82 0f       	add	r24, r18
    2562:	93 1f       	adc	r25, r19
    2564:	9a 01       	movw	r18, r20
    2566:	28 0f       	add	r18, r24
    2568:	39 1f       	adc	r19, r25
    256a:	86 2f       	mov	r24, r22
    256c:	b9 01       	movw	r22, r18
    256e:	0e 94 55 14 	call	0x28aa	; 0x28aa <decimalToAsciiHexString>
				CLCD_voidSendData(' ');
    2572:	80 e2       	ldi	r24, 0x20	; 32
    2574:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
				CLCD_voidSendString(random_hexa[i]);
    2578:	45 eb       	ldi	r20, 0xB5	; 181
    257a:	51 e0       	ldi	r21, 0x01	; 1
    257c:	2b 85       	ldd	r18, Y+11	; 0x0b
    257e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2580:	c9 01       	movw	r24, r18
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	82 0f       	add	r24, r18
    2588:	93 1f       	adc	r25, r19
    258a:	84 0f       	add	r24, r20
    258c:	95 1f       	adc	r25, r21
    258e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <CLCD_voidSendString>
			CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
			CLCD_voidGoToRowColumn(0,0);
			CLCD_voidSendString("67 01");


			for (int i =0;i<4;i++)
    2592:	8b 85       	ldd	r24, Y+11	; 0x0b
    2594:	9c 85       	ldd	r25, Y+12	; 0x0c
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	9c 87       	std	Y+12, r25	; 0x0c
    259a:	8b 87       	std	Y+11, r24	; 0x0b
    259c:	8b 85       	ldd	r24, Y+11	; 0x0b
    259e:	9c 85       	ldd	r25, Y+12	; 0x0c
    25a0:	84 30       	cpi	r24, 0x04	; 4
    25a2:	91 05       	cpc	r25, r1
    25a4:	0c f4       	brge	.+2      	; 0x25a8 <main+0x12a>
    25a6:	ba cf       	rjmp	.-140    	; 0x251c <main+0x9e>
				decimalToAsciiHexString(random_decimal[i],random_hexa[i]);
				CLCD_voidSendData(' ');
				CLCD_voidSendString(random_hexa[i]);
			}

			state = wait_for_access;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	80 93 b2 01 	sts	0x01B2, r24
    25ae:	0c c1       	rjmp	.+536    	; 0x27c8 <main+0x34a>
		}

		else if (service[0] == '2' && service[1] == '7' && sub_service[0] == '0'&& sub_service[1] == '2' && state == wait_for_access)
    25b0:	80 91 d9 01 	lds	r24, 0x01D9
    25b4:	82 33       	cpi	r24, 0x32	; 50
    25b6:	09 f0       	breq	.+2      	; 0x25ba <main+0x13c>
    25b8:	9a c0       	rjmp	.+308    	; 0x26ee <main+0x270>
    25ba:	80 91 da 01 	lds	r24, 0x01DA
    25be:	87 33       	cpi	r24, 0x37	; 55
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <main+0x146>
    25c2:	95 c0       	rjmp	.+298    	; 0x26ee <main+0x270>
    25c4:	80 91 b3 01 	lds	r24, 0x01B3
    25c8:	80 33       	cpi	r24, 0x30	; 48
    25ca:	09 f0       	breq	.+2      	; 0x25ce <main+0x150>
    25cc:	90 c0       	rjmp	.+288    	; 0x26ee <main+0x270>
    25ce:	80 91 b4 01 	lds	r24, 0x01B4
    25d2:	82 33       	cpi	r24, 0x32	; 50
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <main+0x15a>
    25d6:	8b c0       	rjmp	.+278    	; 0x26ee <main+0x270>
    25d8:	80 91 b2 01 	lds	r24, 0x01B2
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	09 f0       	breq	.+2      	; 0x25e2 <main+0x164>
    25e0:	86 c0       	rjmp	.+268    	; 0x26ee <main+0x270>
		{
			for (int i=0; i<4; i++)
    25e2:	1a 86       	std	Y+10, r1	; 0x0a
    25e4:	19 86       	std	Y+9, r1	; 0x09
    25e6:	2f c0       	rjmp	.+94     	; 0x2646 <main+0x1c8>
			{
				for (int j=0; j<2;j++ )
    25e8:	18 86       	std	Y+8, r1	; 0x08
    25ea:	1f 82       	std	Y+7, r1	; 0x07
    25ec:	17 c0       	rjmp	.+46     	; 0x261c <main+0x19e>
				{
					encrypted_by_USER[i][j] = USART_u8Receive();
    25ee:	09 85       	ldd	r16, Y+9	; 0x09
    25f0:	1a 85       	ldd	r17, Y+10	; 0x0a
    25f2:	ef 80       	ldd	r14, Y+7	; 0x07
    25f4:	f8 84       	ldd	r15, Y+8	; 0x08
    25f6:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_u8Receive>
    25fa:	28 2f       	mov	r18, r24
    25fc:	c8 01       	movw	r24, r16
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	80 0f       	add	r24, r16
    2604:	91 1f       	adc	r25, r17
    2606:	8e 0d       	add	r24, r14
    2608:	9f 1d       	adc	r25, r15
    260a:	fc 01       	movw	r30, r24
    260c:	e3 53       	subi	r30, 0x33	; 51
    260e:	fe 4f       	sbci	r31, 0xFE	; 254
    2610:	20 83       	st	Z, r18

		else if (service[0] == '2' && service[1] == '7' && sub_service[0] == '0'&& sub_service[1] == '2' && state == wait_for_access)
		{
			for (int i=0; i<4; i++)
			{
				for (int j=0; j<2;j++ )
    2612:	8f 81       	ldd	r24, Y+7	; 0x07
    2614:	98 85       	ldd	r25, Y+8	; 0x08
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	98 87       	std	Y+8, r25	; 0x08
    261a:	8f 83       	std	Y+7, r24	; 0x07
    261c:	8f 81       	ldd	r24, Y+7	; 0x07
    261e:	98 85       	ldd	r25, Y+8	; 0x08
    2620:	82 30       	cpi	r24, 0x02	; 2
    2622:	91 05       	cpc	r25, r1
    2624:	24 f3       	brlt	.-56     	; 0x25ee <main+0x170>
				{
					encrypted_by_USER[i][j] = USART_u8Receive();
				}
				encrypted_by_USER[i][2] = '\0';
    2626:	29 85       	ldd	r18, Y+9	; 0x09
    2628:	3a 85       	ldd	r19, Y+10	; 0x0a
    262a:	c9 01       	movw	r24, r18
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	82 0f       	add	r24, r18
    2632:	93 1f       	adc	r25, r19
    2634:	fc 01       	movw	r30, r24
    2636:	e1 53       	subi	r30, 0x31	; 49
    2638:	fe 4f       	sbci	r31, 0xFE	; 254
    263a:	10 82       	st	Z, r1
			state = wait_for_access;
		}

		else if (service[0] == '2' && service[1] == '7' && sub_service[0] == '0'&& sub_service[1] == '2' && state == wait_for_access)
		{
			for (int i=0; i<4; i++)
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	01 96       	adiw	r24, 0x01	; 1
    2642:	9a 87       	std	Y+10, r25	; 0x0a
    2644:	89 87       	std	Y+9, r24	; 0x09
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	84 30       	cpi	r24, 0x04	; 4
    264c:	91 05       	cpc	r25, r1
    264e:	64 f2       	brlt	.-104    	; 0x25e8 <main+0x16a>
				}
				encrypted_by_USER[i][2] = '\0';
			}


			for (int i =0;i<4;i++)
    2650:	1e 82       	std	Y+6, r1	; 0x06
    2652:	1d 82       	std	Y+5, r1	; 0x05
    2654:	1c c0       	rjmp	.+56     	; 0x268e <main+0x210>
			{
				if (encrypted_by_ECU[i] != asciiHexToDecimal(encrypted_by_USER[i]))
    2656:	8d 81       	ldd	r24, Y+5	; 0x05
    2658:	9e 81       	ldd	r25, Y+6	; 0x06
    265a:	fc 01       	movw	r30, r24
    265c:	eb 53       	subi	r30, 0x3B	; 59
    265e:	fe 4f       	sbci	r31, 0xFE	; 254
    2660:	10 81       	ld	r17, Z
    2662:	4d ec       	ldi	r20, 0xCD	; 205
    2664:	51 e0       	ldi	r21, 0x01	; 1
    2666:	2d 81       	ldd	r18, Y+5	; 0x05
    2668:	3e 81       	ldd	r19, Y+6	; 0x06
    266a:	c9 01       	movw	r24, r18
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	82 0f       	add	r24, r18
    2672:	93 1f       	adc	r25, r19
    2674:	84 0f       	add	r24, r20
    2676:	95 1f       	adc	r25, r21
    2678:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <asciiHexToDecimal>
    267c:	18 17       	cp	r17, r24
    267e:	11 f0       	breq	.+4      	; 0x2684 <main+0x206>
					check_flag = 0;
    2680:	10 92 ab 01 	sts	0x01AB, r1
				}
				encrypted_by_USER[i][2] = '\0';
			}


			for (int i =0;i<4;i++)
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	9e 83       	std	Y+6, r25	; 0x06
    268c:	8d 83       	std	Y+5, r24	; 0x05
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	84 30       	cpi	r24, 0x04	; 4
    2694:	91 05       	cpc	r25, r1
    2696:	fc f2       	brlt	.-66     	; 0x2656 <main+0x1d8>
			{
				if (encrypted_by_ECU[i] != asciiHexToDecimal(encrypted_by_USER[i]))
					check_flag = 0;
			}

			CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>
			CLCD_voidGoToRowColumn(0,0);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <CLCD_voidGoToRowColumn>

			if(check_flag)
    26a6:	80 91 ab 01 	lds	r24, 0x01AB
    26aa:	88 23       	and	r24, r24
    26ac:	79 f0       	breq	.+30     	; 0x26cc <main+0x24e>
			{
				state = accessed;
    26ae:	82 e0       	ldi	r24, 0x02	; 2
    26b0:	80 93 b2 01 	sts	0x01B2, r24
				CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>
				CLCD_voidGoToRowColumn(0,0);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <CLCD_voidGoToRowColumn>
				CLCD_voidSendString("67 02");
    26c2:	86 e6       	ldi	r24, 0x66	; 102
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <CLCD_voidSendString>
    26ca:	7e c0       	rjmp	.+252    	; 0x27c8 <main+0x34a>
			}
			else
			{
				state = no_access;
    26cc:	10 92 b2 01 	sts	0x01B2, r1
				check_flag = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	80 93 ab 01 	sts	0x01AB, r24
				CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>
				CLCD_voidGoToRowColumn(0,0);
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <CLCD_voidGoToRowColumn>
				CLCD_voidSendString("7F 27 35");
    26e4:	8c e6       	ldi	r24, 0x6C	; 108
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <CLCD_voidSendString>
    26ec:	6d c0       	rjmp	.+218    	; 0x27c8 <main+0x34a>
			}
		}
		else if (service[0] == '3' && service[1] == '1' && sub_service[0] == '0' && sub_service[1] == '1')
    26ee:	80 91 d9 01 	lds	r24, 0x01D9
    26f2:	83 33       	cpi	r24, 0x33	; 51
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <main+0x27a>
    26f6:	68 c0       	rjmp	.+208    	; 0x27c8 <main+0x34a>
    26f8:	80 91 da 01 	lds	r24, 0x01DA
    26fc:	81 33       	cpi	r24, 0x31	; 49
    26fe:	09 f0       	breq	.+2      	; 0x2702 <main+0x284>
    2700:	63 c0       	rjmp	.+198    	; 0x27c8 <main+0x34a>
    2702:	80 91 b3 01 	lds	r24, 0x01B3
    2706:	80 33       	cpi	r24, 0x30	; 48
    2708:	09 f0       	breq	.+2      	; 0x270c <main+0x28e>
    270a:	5e c0       	rjmp	.+188    	; 0x27c8 <main+0x34a>
    270c:	80 91 b4 01 	lds	r24, 0x01B4
    2710:	81 33       	cpi	r24, 0x31	; 49
    2712:	09 f0       	breq	.+2      	; 0x2716 <main+0x298>
    2714:	59 c0       	rjmp	.+178    	; 0x27c8 <main+0x34a>
		{
			for (int i=0 ; i<4; i++)
    2716:	1c 82       	std	Y+4, r1	; 0x04
    2718:	1b 82       	std	Y+3, r1	; 0x03
    271a:	0d c0       	rjmp	.+26     	; 0x2736 <main+0x2b8>
				routine[i] = USART_u8Receive();
    271c:	0b 81       	ldd	r16, Y+3	; 0x03
    271e:	1c 81       	ldd	r17, Y+4	; 0x04
    2720:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_u8Receive>
    2724:	f8 01       	movw	r30, r16
    2726:	e7 53       	subi	r30, 0x37	; 55
    2728:	fe 4f       	sbci	r31, 0xFE	; 254
    272a:	80 83       	st	Z, r24
				CLCD_voidSendString("7F 27 35");
			}
		}
		else if (service[0] == '3' && service[1] == '1' && sub_service[0] == '0' && sub_service[1] == '1')
		{
			for (int i=0 ; i<4; i++)
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	9c 81       	ldd	r25, Y+4	; 0x04
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	9c 83       	std	Y+4, r25	; 0x04
    2734:	8b 83       	std	Y+3, r24	; 0x03
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	84 30       	cpi	r24, 0x04	; 4
    273c:	91 05       	cpc	r25, r1
    273e:	74 f3       	brlt	.-36     	; 0x271c <main+0x29e>
				routine[i] = USART_u8Receive();


			for (int i=0 ; i<4; i++)
    2740:	1a 82       	std	Y+2, r1	; 0x02
    2742:	19 82       	std	Y+1, r1	; 0x01
    2744:	15 c0       	rjmp	.+42     	; 0x2770 <main+0x2f2>
				if(	routine[i] != routine_saved[i])
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	fc 01       	movw	r30, r24
    274c:	e7 53       	subi	r30, 0x37	; 55
    274e:	fe 4f       	sbci	r31, 0xFE	; 254
    2750:	20 81       	ld	r18, Z
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	fc 01       	movw	r30, r24
    2758:	e9 55       	subi	r30, 0x59	; 89
    275a:	fe 4f       	sbci	r31, 0xFE	; 254
    275c:	80 81       	ld	r24, Z
    275e:	28 17       	cp	r18, r24
    2760:	11 f0       	breq	.+4      	; 0x2766 <main+0x2e8>
					Routine_check =0;
    2762:	10 92 ac 01 	sts	0x01AC, r1
		{
			for (int i=0 ; i<4; i++)
				routine[i] = USART_u8Receive();


			for (int i=0 ; i<4; i++)
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	84 30       	cpi	r24, 0x04	; 4
    2776:	91 05       	cpc	r25, r1
    2778:	34 f3       	brlt	.-52     	; 0x2746 <main+0x2c8>
				if(	routine[i] != routine_saved[i])
					Routine_check =0;


			if (state == accessed && Routine_check)
    277a:	80 91 b2 01 	lds	r24, 0x01B2
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	a9 f4       	brne	.+42     	; 0x27ac <main+0x32e>
    2782:	80 91 ac 01 	lds	r24, 0x01AC
    2786:	88 23       	and	r24, r24
    2788:	89 f0       	breq	.+34     	; 0x27ac <main+0x32e>
			{
				CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>
				CLCD_voidGoToRowColumn(0,0);
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <CLCD_voidGoToRowColumn>
				CLCD_voidSendString("71 01 AA 00");
    2798:	85 e7       	ldi	r24, 0x75	; 117
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <CLCD_voidSendString>
				DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN7,DIO_u8PIN_HIGH);  //LED
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	67 e0       	ldi	r22, 0x07	; 7
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8SetPinValue>
    27aa:	0e c0       	rjmp	.+28     	; 0x27c8 <main+0x34a>
			}
			else
			{
				Routine_check = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	80 93 ac 01 	sts	0x01AC, r24
				CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	0e 94 2f 07 	call	0xe5e	; 0xe5e <CLCD_voidSendCommand>
				CLCD_voidGoToRowColumn(0,0);
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <CLCD_voidGoToRowColumn>
				CLCD_voidSendString("NRC 7F 31 35");
    27c0:	81 e8       	ldi	r24, 0x81	; 129
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <CLCD_voidSendString>
			}
		}

		while(13 != USART_u8Receive())
    27c8:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_u8Receive>
    27cc:	8d 30       	cpi	r24, 0x0D	; 13
    27ce:	e1 f7       	brne	.-8      	; 0x27c8 <main+0x34a>
    27d0:	6e ce       	rjmp	.-804    	; 0x24ae <main+0x30>

000027d2 <asciiHexToDecimal>:





u8 asciiHexToDecimal(const char *hexString) {
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <asciiHexToDecimal+0x6>
    27d8:	00 d0       	rcall	.+0      	; 0x27da <asciiHexToDecimal+0x8>
    27da:	0f 92       	push	r0
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	8b 83       	std	Y+3, r24	; 0x03
    u8 decimalValue = 0;
    27e4:	1a 82       	std	Y+2, r1	; 0x02

    if (hexString == NULL) {
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <asciiHexToDecimal+0x1e>
    27ee:	4c c0       	rjmp	.+152    	; 0x2888 <asciiHexToDecimal+0xb6>
        return 0;
    27f0:	1d 82       	std	Y+5, r1	; 0x05
    27f2:	52 c0       	rjmp	.+164    	; 0x2898 <asciiHexToDecimal+0xc6>
    }

    while (*hexString) {
        char c = *hexString++;
    27f4:	eb 81       	ldd	r30, Y+3	; 0x03
    27f6:	fc 81       	ldd	r31, Y+4	; 0x04
    27f8:	80 81       	ld	r24, Z
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03

        if (c >= '0' && c <= '9') {
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	80 33       	cpi	r24, 0x30	; 48
    280a:	90 f0       	brcs	.+36     	; 0x2830 <asciiHexToDecimal+0x5e>
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	8a 33       	cpi	r24, 0x3A	; 58
    2810:	78 f4       	brcc	.+30     	; 0x2830 <asciiHexToDecimal+0x5e>
            decimalValue = (decimalValue << 4) | (c - '0');
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	82 95       	swap	r24
    281a:	92 95       	swap	r25
    281c:	90 7f       	andi	r25, 0xF0	; 240
    281e:	98 27       	eor	r25, r24
    2820:	80 7f       	andi	r24, 0xF0	; 240
    2822:	98 27       	eor	r25, r24
    2824:	98 2f       	mov	r25, r24
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	80 53       	subi	r24, 0x30	; 48
    282a:	89 2b       	or	r24, r25
    282c:	8a 83       	std	Y+2, r24	; 0x02
    282e:	2c c0       	rjmp	.+88     	; 0x2888 <asciiHexToDecimal+0xb6>
        } else if (c >= 'A' && c <= 'F') {
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	81 34       	cpi	r24, 0x41	; 65
    2834:	90 f0       	brcs	.+36     	; 0x285a <asciiHexToDecimal+0x88>
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	87 34       	cpi	r24, 0x47	; 71
    283a:	78 f4       	brcc	.+30     	; 0x285a <asciiHexToDecimal+0x88>
            decimalValue = (decimalValue << 4) | (c - 'A' + 10);
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	82 95       	swap	r24
    2844:	92 95       	swap	r25
    2846:	90 7f       	andi	r25, 0xF0	; 240
    2848:	98 27       	eor	r25, r24
    284a:	80 7f       	andi	r24, 0xF0	; 240
    284c:	98 27       	eor	r25, r24
    284e:	98 2f       	mov	r25, r24
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	87 53       	subi	r24, 0x37	; 55
    2854:	89 2b       	or	r24, r25
    2856:	8a 83       	std	Y+2, r24	; 0x02
    2858:	17 c0       	rjmp	.+46     	; 0x2888 <asciiHexToDecimal+0xb6>
        } else if (c >= 'a' && c <= 'f') {
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	81 36       	cpi	r24, 0x61	; 97
    285e:	90 f0       	brcs	.+36     	; 0x2884 <asciiHexToDecimal+0xb2>
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	87 36       	cpi	r24, 0x67	; 103
    2864:	78 f4       	brcc	.+30     	; 0x2884 <asciiHexToDecimal+0xb2>
            decimalValue = (decimalValue << 4) | (c - 'a' + 10);
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	82 95       	swap	r24
    286e:	92 95       	swap	r25
    2870:	90 7f       	andi	r25, 0xF0	; 240
    2872:	98 27       	eor	r25, r24
    2874:	80 7f       	andi	r24, 0xF0	; 240
    2876:	98 27       	eor	r25, r24
    2878:	98 2f       	mov	r25, r24
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	87 55       	subi	r24, 0x57	; 87
    287e:	89 2b       	or	r24, r25
    2880:	8a 83       	std	Y+2, r24	; 0x02
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <asciiHexToDecimal+0xb6>
        } else {
            // Handle invalid character, if needed
            // For simplicity, this example ignores non-hex characters
            return 0;
    2884:	1d 82       	std	Y+5, r1	; 0x05
    2886:	08 c0       	rjmp	.+16     	; 0x2898 <asciiHexToDecimal+0xc6>

    if (hexString == NULL) {
        return 0;
    }

    while (*hexString) {
    2888:	eb 81       	ldd	r30, Y+3	; 0x03
    288a:	fc 81       	ldd	r31, Y+4	; 0x04
    288c:	80 81       	ld	r24, Z
    288e:	88 23       	and	r24, r24
    2890:	09 f0       	breq	.+2      	; 0x2894 <asciiHexToDecimal+0xc2>
    2892:	b0 cf       	rjmp	.-160    	; 0x27f4 <asciiHexToDecimal+0x22>
            // For simplicity, this example ignores non-hex characters
            return 0;
        }
    }

    return decimalValue;
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	8d 83       	std	Y+5, r24	; 0x05
    2898:	8d 81       	ldd	r24, Y+5	; 0x05
}
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <decimalToAsciiHexString>:

void decimalToAsciiHexString(u8 decimalValue, char *hexString) {
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	69 97       	sbiw	r28, 0x19	; 25
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	8a 8b       	std	Y+18, r24	; 0x12
    28c0:	7c 8b       	std	Y+20, r23	; 0x14
    28c2:	6b 8b       	std	Y+19, r22	; 0x13
    const char hexDigits[] = "0123456789ABCDEF";
    28c4:	ce 01       	movw	r24, r28
    28c6:	01 96       	adiw	r24, 0x01	; 1
    28c8:	9e 8b       	std	Y+22, r25	; 0x16
    28ca:	8d 8b       	std	Y+21, r24	; 0x15
    28cc:	ee e8       	ldi	r30, 0x8E	; 142
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	f8 8f       	std	Y+24, r31	; 0x18
    28d2:	ef 8b       	std	Y+23, r30	; 0x17
    28d4:	f1 e1       	ldi	r31, 0x11	; 17
    28d6:	f9 8f       	std	Y+25, r31	; 0x19
    28d8:	ef 89       	ldd	r30, Y+23	; 0x17
    28da:	f8 8d       	ldd	r31, Y+24	; 0x18
    28dc:	00 80       	ld	r0, Z
    28de:	8f 89       	ldd	r24, Y+23	; 0x17
    28e0:	98 8d       	ldd	r25, Y+24	; 0x18
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	98 8f       	std	Y+24, r25	; 0x18
    28e6:	8f 8b       	std	Y+23, r24	; 0x17
    28e8:	ed 89       	ldd	r30, Y+21	; 0x15
    28ea:	fe 89       	ldd	r31, Y+22	; 0x16
    28ec:	00 82       	st	Z, r0
    28ee:	8d 89       	ldd	r24, Y+21	; 0x15
    28f0:	9e 89       	ldd	r25, Y+22	; 0x16
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	9e 8b       	std	Y+22, r25	; 0x16
    28f6:	8d 8b       	std	Y+21, r24	; 0x15
    28f8:	99 8d       	ldd	r25, Y+25	; 0x19
    28fa:	91 50       	subi	r25, 0x01	; 1
    28fc:	99 8f       	std	Y+25, r25	; 0x19
    28fe:	e9 8d       	ldd	r30, Y+25	; 0x19
    2900:	ee 23       	and	r30, r30
    2902:	51 f7       	brne	.-44     	; 0x28d8 <decimalToAsciiHexString+0x2e>

    hexString[0] = hexDigits[(decimalValue >> 4) & 0xF];
    2904:	8a 89       	ldd	r24, Y+18	; 0x12
    2906:	82 95       	swap	r24
    2908:	8f 70       	andi	r24, 0x0F	; 15
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	ce 01       	movw	r24, r28
    2910:	01 96       	adiw	r24, 0x01	; 1
    2912:	fc 01       	movw	r30, r24
    2914:	e2 0f       	add	r30, r18
    2916:	f3 1f       	adc	r31, r19
    2918:	80 81       	ld	r24, Z
    291a:	eb 89       	ldd	r30, Y+19	; 0x13
    291c:	fc 89       	ldd	r31, Y+20	; 0x14
    291e:	80 83       	st	Z, r24
    hexString[1] = hexDigits[decimalValue & 0xF];
    2920:	8b 89       	ldd	r24, Y+19	; 0x13
    2922:	9c 89       	ldd	r25, Y+20	; 0x14
    2924:	dc 01       	movw	r26, r24
    2926:	11 96       	adiw	r26, 0x01	; 1
    2928:	8a 89       	ldd	r24, Y+18	; 0x12
    292a:	88 2f       	mov	r24, r24
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9c 01       	movw	r18, r24
    2930:	2f 70       	andi	r18, 0x0F	; 15
    2932:	30 70       	andi	r19, 0x00	; 0
    2934:	ce 01       	movw	r24, r28
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	fc 01       	movw	r30, r24
    293a:	e2 0f       	add	r30, r18
    293c:	f3 1f       	adc	r31, r19
    293e:	80 81       	ld	r24, Z
    2940:	8c 93       	st	X, r24
    hexString[2] = '\0';  // Null-terminate the string
    2942:	8b 89       	ldd	r24, Y+19	; 0x13
    2944:	9c 89       	ldd	r25, Y+20	; 0x14
    2946:	fc 01       	movw	r30, r24
    2948:	32 96       	adiw	r30, 0x02	; 2
    294a:	10 82       	st	Z, r1
}
    294c:	69 96       	adiw	r28, 0x19	; 25
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <__udivmodhi4>:
    295e:	aa 1b       	sub	r26, r26
    2960:	bb 1b       	sub	r27, r27
    2962:	51 e1       	ldi	r21, 0x11	; 17
    2964:	07 c0       	rjmp	.+14     	; 0x2974 <__udivmodhi4_ep>

00002966 <__udivmodhi4_loop>:
    2966:	aa 1f       	adc	r26, r26
    2968:	bb 1f       	adc	r27, r27
    296a:	a6 17       	cp	r26, r22
    296c:	b7 07       	cpc	r27, r23
    296e:	10 f0       	brcs	.+4      	; 0x2974 <__udivmodhi4_ep>
    2970:	a6 1b       	sub	r26, r22
    2972:	b7 0b       	sbc	r27, r23

00002974 <__udivmodhi4_ep>:
    2974:	88 1f       	adc	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	5a 95       	dec	r21
    297a:	a9 f7       	brne	.-22     	; 0x2966 <__udivmodhi4_loop>
    297c:	80 95       	com	r24
    297e:	90 95       	com	r25
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	08 95       	ret

00002986 <__udivmodsi4>:
    2986:	a1 e2       	ldi	r26, 0x21	; 33
    2988:	1a 2e       	mov	r1, r26
    298a:	aa 1b       	sub	r26, r26
    298c:	bb 1b       	sub	r27, r27
    298e:	fd 01       	movw	r30, r26
    2990:	0d c0       	rjmp	.+26     	; 0x29ac <__udivmodsi4_ep>

00002992 <__udivmodsi4_loop>:
    2992:	aa 1f       	adc	r26, r26
    2994:	bb 1f       	adc	r27, r27
    2996:	ee 1f       	adc	r30, r30
    2998:	ff 1f       	adc	r31, r31
    299a:	a2 17       	cp	r26, r18
    299c:	b3 07       	cpc	r27, r19
    299e:	e4 07       	cpc	r30, r20
    29a0:	f5 07       	cpc	r31, r21
    29a2:	20 f0       	brcs	.+8      	; 0x29ac <__udivmodsi4_ep>
    29a4:	a2 1b       	sub	r26, r18
    29a6:	b3 0b       	sbc	r27, r19
    29a8:	e4 0b       	sbc	r30, r20
    29aa:	f5 0b       	sbc	r31, r21

000029ac <__udivmodsi4_ep>:
    29ac:	66 1f       	adc	r22, r22
    29ae:	77 1f       	adc	r23, r23
    29b0:	88 1f       	adc	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	1a 94       	dec	r1
    29b6:	69 f7       	brne	.-38     	; 0x2992 <__udivmodsi4_loop>
    29b8:	60 95       	com	r22
    29ba:	70 95       	com	r23
    29bc:	80 95       	com	r24
    29be:	90 95       	com	r25
    29c0:	9b 01       	movw	r18, r22
    29c2:	ac 01       	movw	r20, r24
    29c4:	bd 01       	movw	r22, r26
    29c6:	cf 01       	movw	r24, r30
    29c8:	08 95       	ret

000029ca <__prologue_saves__>:
    29ca:	2f 92       	push	r2
    29cc:	3f 92       	push	r3
    29ce:	4f 92       	push	r4
    29d0:	5f 92       	push	r5
    29d2:	6f 92       	push	r6
    29d4:	7f 92       	push	r7
    29d6:	8f 92       	push	r8
    29d8:	9f 92       	push	r9
    29da:	af 92       	push	r10
    29dc:	bf 92       	push	r11
    29de:	cf 92       	push	r12
    29e0:	df 92       	push	r13
    29e2:	ef 92       	push	r14
    29e4:	ff 92       	push	r15
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	ca 1b       	sub	r28, r26
    29f4:	db 0b       	sbc	r29, r27
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	09 94       	ijmp

00002a02 <__epilogue_restores__>:
    2a02:	2a 88       	ldd	r2, Y+18	; 0x12
    2a04:	39 88       	ldd	r3, Y+17	; 0x11
    2a06:	48 88       	ldd	r4, Y+16	; 0x10
    2a08:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a10:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a12:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a14:	b9 84       	ldd	r11, Y+9	; 0x09
    2a16:	c8 84       	ldd	r12, Y+8	; 0x08
    2a18:	df 80       	ldd	r13, Y+7	; 0x07
    2a1a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a1e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a20:	1b 81       	ldd	r17, Y+3	; 0x03
    2a22:	aa 81       	ldd	r26, Y+2	; 0x02
    2a24:	b9 81       	ldd	r27, Y+1	; 0x01
    2a26:	ce 0f       	add	r28, r30
    2a28:	d1 1d       	adc	r29, r1
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	ed 01       	movw	r28, r26
    2a36:	08 95       	ret

00002a38 <_exit>:
    2a38:	f8 94       	cli

00002a3a <__stop_program>:
    2a3a:	ff cf       	rjmp	.-2      	; 0x2a3a <__stop_program>
